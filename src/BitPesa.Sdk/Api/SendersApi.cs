/* 
 * BitPesa API
 *
 * Reference documentation for the BitPesa API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using BitPesa.Sdk.Client;
using BitPesa.Sdk.Model;

namespace BitPesa.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISendersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deleting a sender
        /// </summary>
        /// <remarks>
        /// Deletes a single sender by the Sender ID
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to delete.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>SenderResponse</returns>
        SenderResponse DeleteSender (Guid? senderID);

        /// <summary>
        /// Deleting a sender
        /// </summary>
        /// <remarks>
        /// Deletes a single sender by the Sender ID
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to delete.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>ApiResponse of SenderResponse</returns>
        ApiResponse<SenderResponse> DeleteSenderWithHttpInfo (Guid? senderID);
        /// <summary>
        /// Fetching a sender
        /// </summary>
        /// <remarks>
        /// Returns a single sender by the Sender ID
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>SenderResponse</returns>
        SenderResponse GetSender (Guid? senderID);

        /// <summary>
        /// Fetching a sender
        /// </summary>
        /// <remarks>
        /// Returns a single sender by the Sender ID
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>ApiResponse of SenderResponse</returns>
        ApiResponse<SenderResponse> GetSenderWithHttpInfo (Guid? senderID);
        /// <summary>
        /// Listing senders
        /// </summary>
        /// <remarks>
        /// Get a list of available senders
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="createdAtFrom">Start date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="createdAtTo">End date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>SenderListResponse</returns>
        SenderListResponse GetSenders (int? page = null, int? per = null, string createdAtFrom = null, string createdAtTo = null, string externalId = null);

        /// <summary>
        /// Listing senders
        /// </summary>
        /// <remarks>
        /// Get a list of available senders
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="createdAtFrom">Start date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="createdAtTo">End date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>ApiResponse of SenderListResponse</returns>
        ApiResponse<SenderListResponse> GetSendersWithHttpInfo (int? page = null, int? per = null, string createdAtFrom = null, string createdAtTo = null, string externalId = null);
        /// <summary>
        /// Updating a sender
        /// </summary>
        /// <remarks>
        /// Updates the sender specified in the URL path.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="senderRequest"></param>
        /// <returns>SenderResponse</returns>
        SenderResponse PatchSender (Guid? senderID, SenderRequest senderRequest);

        /// <summary>
        /// Updating a sender
        /// </summary>
        /// <remarks>
        /// Updates the sender specified in the URL path.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="senderRequest"></param>
        /// <returns>ApiResponse of SenderResponse</returns>
        ApiResponse<SenderResponse> PatchSenderWithHttpInfo (Guid? senderID, SenderRequest senderRequest);
        /// <summary>
        /// Creating a sender
        /// </summary>
        /// <remarks>
        /// Creates a new sender in our system. 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderRequest"></param>
        /// <returns>SenderResponse</returns>
        SenderResponse PostSenders (SenderRequest senderRequest);

        /// <summary>
        /// Creating a sender
        /// </summary>
        /// <remarks>
        /// Creates a new sender in our system. 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderRequest"></param>
        /// <returns>ApiResponse of SenderResponse</returns>
        ApiResponse<SenderResponse> PostSendersWithHttpInfo (SenderRequest senderRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deleting a sender
        /// </summary>
        /// <remarks>
        /// Deletes a single sender by the Sender ID
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to delete.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of SenderResponse</returns>
        System.Threading.Tasks.Task<SenderResponse> DeleteSenderAsync (Guid? senderID);

        /// <summary>
        /// Deleting a sender
        /// </summary>
        /// <remarks>
        /// Deletes a single sender by the Sender ID
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to delete.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of ApiResponse (SenderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SenderResponse>> DeleteSenderAsyncWithHttpInfo (Guid? senderID);
        /// <summary>
        /// Fetching a sender
        /// </summary>
        /// <remarks>
        /// Returns a single sender by the Sender ID
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of SenderResponse</returns>
        System.Threading.Tasks.Task<SenderResponse> GetSenderAsync (Guid? senderID);

        /// <summary>
        /// Fetching a sender
        /// </summary>
        /// <remarks>
        /// Returns a single sender by the Sender ID
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of ApiResponse (SenderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SenderResponse>> GetSenderAsyncWithHttpInfo (Guid? senderID);
        /// <summary>
        /// Listing senders
        /// </summary>
        /// <remarks>
        /// Get a list of available senders
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="createdAtFrom">Start date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="createdAtTo">End date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>Task of SenderListResponse</returns>
        System.Threading.Tasks.Task<SenderListResponse> GetSendersAsync (int? page = null, int? per = null, string createdAtFrom = null, string createdAtTo = null, string externalId = null);

        /// <summary>
        /// Listing senders
        /// </summary>
        /// <remarks>
        /// Get a list of available senders
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="createdAtFrom">Start date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="createdAtTo">End date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (SenderListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SenderListResponse>> GetSendersAsyncWithHttpInfo (int? page = null, int? per = null, string createdAtFrom = null, string createdAtTo = null, string externalId = null);
        /// <summary>
        /// Updating a sender
        /// </summary>
        /// <remarks>
        /// Updates the sender specified in the URL path.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="senderRequest"></param>
        /// <returns>Task of SenderResponse</returns>
        System.Threading.Tasks.Task<SenderResponse> PatchSenderAsync (Guid? senderID, SenderRequest senderRequest);

        /// <summary>
        /// Updating a sender
        /// </summary>
        /// <remarks>
        /// Updates the sender specified in the URL path.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="senderRequest"></param>
        /// <returns>Task of ApiResponse (SenderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SenderResponse>> PatchSenderAsyncWithHttpInfo (Guid? senderID, SenderRequest senderRequest);
        /// <summary>
        /// Creating a sender
        /// </summary>
        /// <remarks>
        /// Creates a new sender in our system. 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderRequest"></param>
        /// <returns>Task of SenderResponse</returns>
        System.Threading.Tasks.Task<SenderResponse> PostSendersAsync (SenderRequest senderRequest);

        /// <summary>
        /// Creating a sender
        /// </summary>
        /// <remarks>
        /// Creates a new sender in our system. 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderRequest"></param>
        /// <returns>Task of ApiResponse (SenderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SenderResponse>> PostSendersAsyncWithHttpInfo (SenderRequest senderRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SendersApi : ISendersApi
    {
        private BitPesa.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SendersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SendersApi(String basePath)
        {
            this.Configuration = new BitPesa.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = BitPesa.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendersApi"/> class
        /// </summary>
        /// <returns></returns>
        public SendersApi()
        {
            this.Configuration = BitPesa.Sdk.Client.Configuration.Default;

            ExceptionFactory = BitPesa.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SendersApi(BitPesa.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = BitPesa.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BitPesa.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BitPesa.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BitPesa.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deleting a sender Deletes a single sender by the Sender ID
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to delete.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>SenderResponse</returns>
        public SenderResponse DeleteSender (Guid? senderID)
        {
             ApiResponse<SenderResponse> localVarResponse = DeleteSenderWithHttpInfo(senderID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a sender Deletes a single sender by the Sender ID
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to delete.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>ApiResponse of SenderResponse</returns>
        public ApiResponse< SenderResponse > DeleteSenderWithHttpInfo (Guid? senderID)
        {
            // verify the required parameter 'senderID' is set
            if (senderID == null)
                throw new ApiException(400, "Missing required parameter 'senderID' when calling SendersApi->DeleteSender");

            var localVarPath = "/senders/{Sender ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderID != null) localVarPathParams.Add("Sender ID", this.Configuration.ApiClient.ParameterToString(senderID)); // path parameter

            var request = new RestRequest(localVarPath, Method.DELETE);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "DELETE", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SenderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderResponse)));
        }

        /// <summary>
        /// Deleting a sender Deletes a single sender by the Sender ID
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to delete.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of SenderResponse</returns>
        public async System.Threading.Tasks.Task<SenderResponse> DeleteSenderAsync (Guid? senderID)
        {
             ApiResponse<SenderResponse> localVarResponse = await DeleteSenderAsyncWithHttpInfo(senderID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a sender Deletes a single sender by the Sender ID
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to delete.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of ApiResponse (SenderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SenderResponse>> DeleteSenderAsyncWithHttpInfo (Guid? senderID)
        {
            // verify the required parameter 'senderID' is set
            if (senderID == null)
                throw new ApiException(400, "Missing required parameter 'senderID' when calling SendersApi->DeleteSender");

            var localVarPath = "/senders/{Sender ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderID != null) localVarPathParams.Add("Sender ID", this.Configuration.ApiClient.ParameterToString(senderID)); // path parameter

            var request = new RestRequest(localVarPath, Method.DELETE);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "DELETE", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SenderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderResponse)));
        }

        /// <summary>
        /// Fetching a sender Returns a single sender by the Sender ID
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>SenderResponse</returns>
        public SenderResponse GetSender (Guid? senderID)
        {
             ApiResponse<SenderResponse> localVarResponse = GetSenderWithHttpInfo(senderID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetching a sender Returns a single sender by the Sender ID
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>ApiResponse of SenderResponse</returns>
        public ApiResponse< SenderResponse > GetSenderWithHttpInfo (Guid? senderID)
        {
            // verify the required parameter 'senderID' is set
            if (senderID == null)
                throw new ApiException(400, "Missing required parameter 'senderID' when calling SendersApi->GetSender");

            var localVarPath = "/senders/{Sender ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderID != null) localVarPathParams.Add("Sender ID", this.Configuration.ApiClient.ParameterToString(senderID)); // path parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SenderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderResponse)));
        }

        /// <summary>
        /// Fetching a sender Returns a single sender by the Sender ID
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of SenderResponse</returns>
        public async System.Threading.Tasks.Task<SenderResponse> GetSenderAsync (Guid? senderID)
        {
             ApiResponse<SenderResponse> localVarResponse = await GetSenderAsyncWithHttpInfo(senderID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetching a sender Returns a single sender by the Sender ID
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of ApiResponse (SenderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SenderResponse>> GetSenderAsyncWithHttpInfo (Guid? senderID)
        {
            // verify the required parameter 'senderID' is set
            if (senderID == null)
                throw new ApiException(400, "Missing required parameter 'senderID' when calling SendersApi->GetSender");

            var localVarPath = "/senders/{Sender ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderID != null) localVarPathParams.Add("Sender ID", this.Configuration.ApiClient.ParameterToString(senderID)); // path parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SenderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderResponse)));
        }

        /// <summary>
        /// Listing senders Get a list of available senders
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="createdAtFrom">Start date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="createdAtTo">End date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>SenderListResponse</returns>
        public SenderListResponse GetSenders (int? page = null, int? per = null, string createdAtFrom = null, string createdAtTo = null, string externalId = null)
        {
             ApiResponse<SenderListResponse> localVarResponse = GetSendersWithHttpInfo(page, per, createdAtFrom, createdAtTo, externalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Listing senders Get a list of available senders
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="createdAtFrom">Start date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="createdAtTo">End date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>ApiResponse of SenderListResponse</returns>
        public ApiResponse< SenderListResponse > GetSendersWithHttpInfo (int? page = null, int? per = null, string createdAtFrom = null, string createdAtTo = null, string externalId = null)
        {

            var localVarPath = "/senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (per != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per", per)); // query parameter
            if (createdAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_from", createdAtFrom)); // query parameter
            if (createdAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_to", createdAtTo)); // query parameter
            if (externalId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_id", externalId)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SenderListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderListResponse)));
        }

        /// <summary>
        /// Listing senders Get a list of available senders
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="createdAtFrom">Start date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="createdAtTo">End date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>Task of SenderListResponse</returns>
        public async System.Threading.Tasks.Task<SenderListResponse> GetSendersAsync (int? page = null, int? per = null, string createdAtFrom = null, string createdAtTo = null, string externalId = null)
        {
             ApiResponse<SenderListResponse> localVarResponse = await GetSendersAsyncWithHttpInfo(page, per, createdAtFrom, createdAtTo, externalId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Listing senders Get a list of available senders
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="createdAtFrom">Start date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="createdAtTo">End date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (SenderListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SenderListResponse>> GetSendersAsyncWithHttpInfo (int? page = null, int? per = null, string createdAtFrom = null, string createdAtTo = null, string externalId = null)
        {

            var localVarPath = "/senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (per != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per", per)); // query parameter
            if (createdAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_from", createdAtFrom)); // query parameter
            if (createdAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_to", createdAtTo)); // query parameter
            if (externalId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_id", externalId)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SenderListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderListResponse)));
        }

        /// <summary>
        /// Updating a sender Updates the sender specified in the URL path.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="senderRequest"></param>
        /// <returns>SenderResponse</returns>
        public SenderResponse PatchSender (Guid? senderID, SenderRequest senderRequest)
        {
             ApiResponse<SenderResponse> localVarResponse = PatchSenderWithHttpInfo(senderID, senderRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a sender Updates the sender specified in the URL path.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="senderRequest"></param>
        /// <returns>ApiResponse of SenderResponse</returns>
        public ApiResponse< SenderResponse > PatchSenderWithHttpInfo (Guid? senderID, SenderRequest senderRequest)
        {
            // verify the required parameter 'senderID' is set
            if (senderID == null)
                throw new ApiException(400, "Missing required parameter 'senderID' when calling SendersApi->PatchSender");
            // verify the required parameter 'senderRequest' is set
            if (senderRequest == null)
                throw new ApiException(400, "Missing required parameter 'senderRequest' when calling SendersApi->PatchSender");

            var localVarPath = "/senders/{Sender ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderID != null) localVarPathParams.Add("Sender ID", this.Configuration.ApiClient.ParameterToString(senderID)); // path parameter
            if (senderRequest != null && senderRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(senderRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = senderRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.PATCH);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "PATCH", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SenderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderResponse)));
        }

        /// <summary>
        /// Updating a sender Updates the sender specified in the URL path.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="senderRequest"></param>
        /// <returns>Task of SenderResponse</returns>
        public async System.Threading.Tasks.Task<SenderResponse> PatchSenderAsync (Guid? senderID, SenderRequest senderRequest)
        {
             ApiResponse<SenderResponse> localVarResponse = await PatchSenderAsyncWithHttpInfo(senderID, senderRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a sender Updates the sender specified in the URL path.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderID">ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="senderRequest"></param>
        /// <returns>Task of ApiResponse (SenderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SenderResponse>> PatchSenderAsyncWithHttpInfo (Guid? senderID, SenderRequest senderRequest)
        {
            // verify the required parameter 'senderID' is set
            if (senderID == null)
                throw new ApiException(400, "Missing required parameter 'senderID' when calling SendersApi->PatchSender");
            // verify the required parameter 'senderRequest' is set
            if (senderRequest == null)
                throw new ApiException(400, "Missing required parameter 'senderRequest' when calling SendersApi->PatchSender");

            var localVarPath = "/senders/{Sender ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderID != null) localVarPathParams.Add("Sender ID", this.Configuration.ApiClient.ParameterToString(senderID)); // path parameter
            if (senderRequest != null && senderRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(senderRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = senderRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.PATCH);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "PATCH", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SenderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderResponse)));
        }

        /// <summary>
        /// Creating a sender Creates a new sender in our system. 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderRequest"></param>
        /// <returns>SenderResponse</returns>
        public SenderResponse PostSenders (SenderRequest senderRequest)
        {
             ApiResponse<SenderResponse> localVarResponse = PostSendersWithHttpInfo(senderRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a sender Creates a new sender in our system. 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderRequest"></param>
        /// <returns>ApiResponse of SenderResponse</returns>
        public ApiResponse< SenderResponse > PostSendersWithHttpInfo (SenderRequest senderRequest)
        {
            // verify the required parameter 'senderRequest' is set
            if (senderRequest == null)
                throw new ApiException(400, "Missing required parameter 'senderRequest' when calling SendersApi->PostSenders");

            var localVarPath = "/senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderRequest != null && senderRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(senderRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = senderRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSenders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SenderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderResponse)));
        }

        /// <summary>
        /// Creating a sender Creates a new sender in our system. 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderRequest"></param>
        /// <returns>Task of SenderResponse</returns>
        public async System.Threading.Tasks.Task<SenderResponse> PostSendersAsync (SenderRequest senderRequest)
        {
             ApiResponse<SenderResponse> localVarResponse = await PostSendersAsyncWithHttpInfo(senderRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a sender Creates a new sender in our system. 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderRequest"></param>
        /// <returns>Task of ApiResponse (SenderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SenderResponse>> PostSendersAsyncWithHttpInfo (SenderRequest senderRequest)
        {
            // verify the required parameter 'senderRequest' is set
            if (senderRequest == null)
                throw new ApiException(400, "Missing required parameter 'senderRequest' when calling SendersApi->PostSenders");

            var localVarPath = "/senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderRequest != null && senderRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(senderRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = senderRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSenders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SenderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderResponse)));
        }

    }
}
