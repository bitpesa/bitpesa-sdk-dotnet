/* 
 * BitPesa API
 *
 * Reference documentation for the BitPesa API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using BitPesa.Sdk.Client;
using BitPesa.Sdk.Model;

namespace BitPesa.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Unsubscribing from a webhook
        /// </summary>
        /// <remarks>
        /// Unsubscribes from a webhook specified
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of webhook to cancel.  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>WebhookDefinitionResponse</returns>
        WebhookDefinitionResponse DeleteWebhook (string webhookID);

        /// <summary>
        /// Unsubscribing from a webhook
        /// </summary>
        /// <remarks>
        /// Unsubscribes from a webhook specified
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of webhook to cancel.  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>ApiResponse of WebhookDefinitionResponse</returns>
        ApiResponse<WebhookDefinitionResponse> DeleteWebhookWithHttpInfo (string webhookID);
        /// <summary>
        /// Find a webhook&#39;s details
        /// </summary>
        /// <remarks>
        /// Look up a webhook&#39;s details with its ID
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of the Webhook to look up  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>WebhookDefinitionResponse</returns>
        WebhookDefinitionResponse GetWebhook (Guid? webhookID);

        /// <summary>
        /// Find a webhook&#39;s details
        /// </summary>
        /// <remarks>
        /// Look up a webhook&#39;s details with its ID
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of the Webhook to look up  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>ApiResponse of WebhookDefinitionResponse</returns>
        ApiResponse<WebhookDefinitionResponse> GetWebhookWithHttpInfo (Guid? webhookID);
        /// <summary>
        /// Find possible webhook events
        /// </summary>
        /// <remarks>
        /// Fetching possible webhook events
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookDefinitionEventListResponse</returns>
        WebhookDefinitionEventListResponse GetWebhookEvents ();

        /// <summary>
        /// Find possible webhook events
        /// </summary>
        /// <remarks>
        /// Fetching possible webhook events
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookDefinitionEventListResponse</returns>
        ApiResponse<WebhookDefinitionEventListResponse> GetWebhookEventsWithHttpInfo ();
        /// <summary>
        /// Listing webhooks
        /// </summary>
        /// <remarks>
        /// Get a list of created webhooks
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>WebhookDefinitionListResponse</returns>
        WebhookDefinitionListResponse GetWebhooks (int?? page = null, int?? per = null);

        /// <summary>
        /// Listing webhooks
        /// </summary>
        /// <remarks>
        /// Get a list of created webhooks
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>ApiResponse of WebhookDefinitionListResponse</returns>
        ApiResponse<WebhookDefinitionListResponse> GetWebhooksWithHttpInfo (int?? page = null, int?? per = null);
        /// <summary>
        /// Creating a webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook, subscribing the provided endpoint to the specified event(s) 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDefinitionRequest"></param>
        /// <returns>WebhookDefinitionResponse</returns>
        WebhookDefinitionResponse PostWebhooks (WebhookDefinitionRequest webhookDefinitionRequest);

        /// <summary>
        /// Creating a webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook, subscribing the provided endpoint to the specified event(s) 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDefinitionRequest"></param>
        /// <returns>ApiResponse of WebhookDefinitionResponse</returns>
        ApiResponse<WebhookDefinitionResponse> PostWebhooksWithHttpInfo (WebhookDefinitionRequest webhookDefinitionRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Unsubscribing from a webhook
        /// </summary>
        /// <remarks>
        /// Unsubscribes from a webhook specified
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of webhook to cancel.  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>Task of WebhookDefinitionResponse</returns>
        System.Threading.Tasks.Task<WebhookDefinitionResponse> DeleteWebhookAsync (string webhookID);

        /// <summary>
        /// Unsubscribing from a webhook
        /// </summary>
        /// <remarks>
        /// Unsubscribes from a webhook specified
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of webhook to cancel.  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>Task of ApiResponse (WebhookDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookDefinitionResponse>> DeleteWebhookAsyncWithHttpInfo (string webhookID);
        /// <summary>
        /// Find a webhook&#39;s details
        /// </summary>
        /// <remarks>
        /// Look up a webhook&#39;s details with its ID
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of the Webhook to look up  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>Task of WebhookDefinitionResponse</returns>
        System.Threading.Tasks.Task<WebhookDefinitionResponse> GetWebhookAsync (Guid? webhookID);

        /// <summary>
        /// Find a webhook&#39;s details
        /// </summary>
        /// <remarks>
        /// Look up a webhook&#39;s details with its ID
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of the Webhook to look up  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>Task of ApiResponse (WebhookDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookDefinitionResponse>> GetWebhookAsyncWithHttpInfo (Guid? webhookID);
        /// <summary>
        /// Find possible webhook events
        /// </summary>
        /// <remarks>
        /// Fetching possible webhook events
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WebhookDefinitionEventListResponse</returns>
        System.Threading.Tasks.Task<WebhookDefinitionEventListResponse> GetWebhookEventsAsync ();

        /// <summary>
        /// Find possible webhook events
        /// </summary>
        /// <remarks>
        /// Fetching possible webhook events
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WebhookDefinitionEventListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookDefinitionEventListResponse>> GetWebhookEventsAsyncWithHttpInfo ();
        /// <summary>
        /// Listing webhooks
        /// </summary>
        /// <remarks>
        /// Get a list of created webhooks
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>Task of WebhookDefinitionListResponse</returns>
        System.Threading.Tasks.Task<WebhookDefinitionListResponse> GetWebhooksAsync (int?? page = null, int?? per = null);

        /// <summary>
        /// Listing webhooks
        /// </summary>
        /// <remarks>
        /// Get a list of created webhooks
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>Task of ApiResponse (WebhookDefinitionListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookDefinitionListResponse>> GetWebhooksAsyncWithHttpInfo (int?? page = null, int?? per = null);
        /// <summary>
        /// Creating a webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook, subscribing the provided endpoint to the specified event(s) 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDefinitionRequest"></param>
        /// <returns>Task of WebhookDefinitionResponse</returns>
        System.Threading.Tasks.Task<WebhookDefinitionResponse> PostWebhooksAsync (WebhookDefinitionRequest webhookDefinitionRequest);

        /// <summary>
        /// Creating a webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook, subscribing the provided endpoint to the specified event(s) 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDefinitionRequest"></param>
        /// <returns>Task of ApiResponse (WebhookDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookDefinitionResponse>> PostWebhooksAsyncWithHttpInfo (WebhookDefinitionRequest webhookDefinitionRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhooksApi : IWebhooksApi
    {
        private BitPesa.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(String basePath)
        {
            this.Configuration = new BitPesa.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = BitPesa.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// </summary>
        /// <returns></returns>
        public WebhooksApi()
        {
            this.Configuration = BitPesa.Sdk.Client.Configuration.Default;

            ExceptionFactory = BitPesa.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(BitPesa.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = BitPesa.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BitPesa.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BitPesa.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BitPesa.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Unsubscribing from a webhook Unsubscribes from a webhook specified
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of webhook to cancel.  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>WebhookDefinitionResponse</returns>
        public WebhookDefinitionResponse DeleteWebhook (string webhookID)
        {
             ApiResponse<WebhookDefinitionResponse> localVarResponse = DeleteWebhookWithHttpInfo(webhookID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribing from a webhook Unsubscribes from a webhook specified
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of webhook to cancel.  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>ApiResponse of WebhookDefinitionResponse</returns>
        public ApiResponse< WebhookDefinitionResponse > DeleteWebhookWithHttpInfo (string webhookID)
        {
            // verify the required parameter 'webhookID' is set
            if (webhookID == null)
                throw new ApiException(400, "Missing required parameter 'webhookID' when calling WebhooksApi->DeleteWebhook");

            var localVarPath = "/webhooks/{Webhook ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookID != null) localVarPathParams.Add("Webhook ID", this.Configuration.ApiClient.ParameterToString(webhookID)); // path parameter

            var request = new RestRequest(localVarPath, Method.DELETE);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "DELETE", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDefinitionResponse)));
        }

        /// <summary>
        /// Unsubscribing from a webhook Unsubscribes from a webhook specified
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of webhook to cancel.  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>Task of WebhookDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<WebhookDefinitionResponse> DeleteWebhookAsync (string webhookID)
        {
             ApiResponse<WebhookDefinitionResponse> localVarResponse = await DeleteWebhookAsyncWithHttpInfo(webhookID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsubscribing from a webhook Unsubscribes from a webhook specified
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of webhook to cancel.  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>Task of ApiResponse (WebhookDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookDefinitionResponse>> DeleteWebhookAsyncWithHttpInfo (string webhookID)
        {
            // verify the required parameter 'webhookID' is set
            if (webhookID == null)
                throw new ApiException(400, "Missing required parameter 'webhookID' when calling WebhooksApi->DeleteWebhook");

            var localVarPath = "/webhooks/{Webhook ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookID != null) localVarPathParams.Add("Webhook ID", this.Configuration.ApiClient.ParameterToString(webhookID)); // path parameter

            var request = new RestRequest(localVarPath, Method.DELETE);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "DELETE", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDefinitionResponse)));
        }

        /// <summary>
        /// Find a webhook&#39;s details Look up a webhook&#39;s details with its ID
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of the Webhook to look up  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>WebhookDefinitionResponse</returns>
        public WebhookDefinitionResponse GetWebhook (Guid? webhookID)
        {
             ApiResponse<WebhookDefinitionResponse> localVarResponse = GetWebhookWithHttpInfo(webhookID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a webhook&#39;s details Look up a webhook&#39;s details with its ID
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of the Webhook to look up  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>ApiResponse of WebhookDefinitionResponse</returns>
        public ApiResponse< WebhookDefinitionResponse > GetWebhookWithHttpInfo (Guid? webhookID)
        {
            // verify the required parameter 'webhookID' is set
            if (webhookID == null)
                throw new ApiException(400, "Missing required parameter 'webhookID' when calling WebhooksApi->GetWebhook");

            var localVarPath = "/webhooks/{Webhook ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookID != null) localVarPathParams.Add("Webhook ID", this.Configuration.ApiClient.ParameterToString(webhookID)); // path parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDefinitionResponse)));
        }

        /// <summary>
        /// Find a webhook&#39;s details Look up a webhook&#39;s details with its ID
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of the Webhook to look up  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>Task of WebhookDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<WebhookDefinitionResponse> GetWebhookAsync (Guid? webhookID)
        {
             ApiResponse<WebhookDefinitionResponse> localVarResponse = await GetWebhookAsyncWithHttpInfo(webhookID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a webhook&#39;s details Look up a webhook&#39;s details with its ID
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookID">The ID of the Webhook to look up  Example: &#x60;/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33&#x60;</param>
        /// <returns>Task of ApiResponse (WebhookDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookDefinitionResponse>> GetWebhookAsyncWithHttpInfo (Guid? webhookID)
        {
            // verify the required parameter 'webhookID' is set
            if (webhookID == null)
                throw new ApiException(400, "Missing required parameter 'webhookID' when calling WebhooksApi->GetWebhook");

            var localVarPath = "/webhooks/{Webhook ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookID != null) localVarPathParams.Add("Webhook ID", this.Configuration.ApiClient.ParameterToString(webhookID)); // path parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDefinitionResponse)));
        }

        /// <summary>
        /// Find possible webhook events Fetching possible webhook events
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookDefinitionEventListResponse</returns>
        public WebhookDefinitionEventListResponse GetWebhookEvents ()
        {
             ApiResponse<WebhookDefinitionEventListResponse> localVarResponse = GetWebhookEventsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find possible webhook events Fetching possible webhook events
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookDefinitionEventListResponse</returns>
        public ApiResponse< WebhookDefinitionEventListResponse > GetWebhookEventsWithHttpInfo ()
        {

            var localVarPath = "/webhooks/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDefinitionEventListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookDefinitionEventListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDefinitionEventListResponse)));
        }

        /// <summary>
        /// Find possible webhook events Fetching possible webhook events
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WebhookDefinitionEventListResponse</returns>
        public async System.Threading.Tasks.Task<WebhookDefinitionEventListResponse> GetWebhookEventsAsync ()
        {
             ApiResponse<WebhookDefinitionEventListResponse> localVarResponse = await GetWebhookEventsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find possible webhook events Fetching possible webhook events
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WebhookDefinitionEventListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookDefinitionEventListResponse>> GetWebhookEventsAsyncWithHttpInfo ()
        {

            var localVarPath = "/webhooks/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDefinitionEventListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookDefinitionEventListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDefinitionEventListResponse)));
        }

        /// <summary>
        /// Listing webhooks Get a list of created webhooks
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>WebhookDefinitionListResponse</returns>
        public WebhookDefinitionListResponse GetWebhooks (int?? page = null, int?? per = null)
        {
             ApiResponse<WebhookDefinitionListResponse> localVarResponse = GetWebhooksWithHttpInfo(page, per);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Listing webhooks Get a list of created webhooks
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>ApiResponse of WebhookDefinitionListResponse</returns>
        public ApiResponse< WebhookDefinitionListResponse > GetWebhooksWithHttpInfo (int?? page = null, int?? per = null)
        {

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (per != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per", per)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDefinitionListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookDefinitionListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDefinitionListResponse)));
        }

        /// <summary>
        /// Listing webhooks Get a list of created webhooks
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>Task of WebhookDefinitionListResponse</returns>
        public async System.Threading.Tasks.Task<WebhookDefinitionListResponse> GetWebhooksAsync (int?? page = null, int?? per = null)
        {
             ApiResponse<WebhookDefinitionListResponse> localVarResponse = await GetWebhooksAsyncWithHttpInfo(page, per);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Listing webhooks Get a list of created webhooks
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>Task of ApiResponse (WebhookDefinitionListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookDefinitionListResponse>> GetWebhooksAsyncWithHttpInfo (int?? page = null, int?? per = null)
        {

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (per != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per", per)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDefinitionListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookDefinitionListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDefinitionListResponse)));
        }

        /// <summary>
        /// Creating a webhook Creates a new webhook, subscribing the provided endpoint to the specified event(s) 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDefinitionRequest"></param>
        /// <returns>WebhookDefinitionResponse</returns>
        public WebhookDefinitionResponse PostWebhooks (WebhookDefinitionRequest webhookDefinitionRequest)
        {
             ApiResponse<WebhookDefinitionResponse> localVarResponse = PostWebhooksWithHttpInfo(webhookDefinitionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a webhook Creates a new webhook, subscribing the provided endpoint to the specified event(s) 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDefinitionRequest"></param>
        /// <returns>ApiResponse of WebhookDefinitionResponse</returns>
        public ApiResponse< WebhookDefinitionResponse > PostWebhooksWithHttpInfo (WebhookDefinitionRequest webhookDefinitionRequest)
        {
            // verify the required parameter 'webhookDefinitionRequest' is set
            if (webhookDefinitionRequest == null)
                throw new ApiException(400, "Missing required parameter 'webhookDefinitionRequest' when calling WebhooksApi->PostWebhooks");

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookDefinitionRequest != null && webhookDefinitionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webhookDefinitionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookDefinitionRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDefinitionResponse)));
        }

        /// <summary>
        /// Creating a webhook Creates a new webhook, subscribing the provided endpoint to the specified event(s) 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDefinitionRequest"></param>
        /// <returns>Task of WebhookDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<WebhookDefinitionResponse> PostWebhooksAsync (WebhookDefinitionRequest webhookDefinitionRequest)
        {
             ApiResponse<WebhookDefinitionResponse> localVarResponse = await PostWebhooksAsyncWithHttpInfo(webhookDefinitionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a webhook Creates a new webhook, subscribing the provided endpoint to the specified event(s) 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDefinitionRequest"></param>
        /// <returns>Task of ApiResponse (WebhookDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookDefinitionResponse>> PostWebhooksAsyncWithHttpInfo (WebhookDefinitionRequest webhookDefinitionRequest)
        {
            // verify the required parameter 'webhookDefinitionRequest' is set
            if (webhookDefinitionRequest == null)
                throw new ApiException(400, "Missing required parameter 'webhookDefinitionRequest' when calling WebhooksApi->PostWebhooks");

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookDefinitionRequest != null && webhookDefinitionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webhookDefinitionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookDefinitionRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDefinitionResponse)));
        }

    }
}
