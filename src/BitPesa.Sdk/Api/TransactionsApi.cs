/* 
 * BitPesa API
 *
 * Reference documentation for the BitPesa API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using BitPesa.Sdk.Client;
using BitPesa.Sdk.Model;

namespace BitPesa.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Calculates transaction amounts for a transaction payload
        /// </summary>
        /// <remarks>
        /// Calculates the input, output and fee amounts for the recipients in a transaction payload
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>TransactionResponse</returns>
        TransactionResponse CalculateTransactions (TransactionRequest transactionRequest);

        /// <summary>
        /// Calculates transaction amounts for a transaction payload
        /// </summary>
        /// <remarks>
        /// Calculates the input, output and fee amounts for the recipients in a transaction payload
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        ApiResponse<TransactionResponse> CalculateTransactionsWithHttpInfo (TransactionRequest transactionRequest);
        /// <summary>
        /// Fetch a single transaction
        /// </summary>
        /// <remarks>
        /// Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>TransactionResponse</returns>
        TransactionResponse GetTransaction (Guid? transactionID);

        /// <summary>
        /// Fetch a single transaction
        /// </summary>
        /// <remarks>
        /// Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        ApiResponse<TransactionResponse> GetTransactionWithHttpInfo (Guid? transactionID);
        /// <summary>
        /// Get a list of transactions
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of the Transactions created by your API key.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>TransactionListResponse</returns>
        TransactionListResponse GetTransactions (int? page = null, int? per = null, string externalId = null);

        /// <summary>
        /// Get a list of transactions
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of the Transactions created by your API key.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>ApiResponse of TransactionListResponse</returns>
        ApiResponse<TransactionListResponse> GetTransactionsWithHttpInfo (int? page = null, int? per = null, string externalId = null);
        /// <summary>
        /// Creates a fake payin for transaction
        /// </summary>
        /// <remarks>
        /// This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60;</param>
        /// <param name="payinMethodRequest"></param>
        /// <returns>TransactionResponse</returns>
        TransactionResponse PayinTransaction (Guid? transactionID, PayinMethodRequest payinMethodRequest);

        /// <summary>
        /// Creates a fake payin for transaction
        /// </summary>
        /// <remarks>
        /// This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60;</param>
        /// <param name="payinMethodRequest"></param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        ApiResponse<TransactionResponse> PayinTransactionWithHttpInfo (Guid? transactionID, PayinMethodRequest payinMethodRequest);
        /// <summary>
        /// Creates a fake payout for transaction
        /// </summary>
        /// <remarks>
        /// This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60;</param>
        /// <returns>TransactionResponse</returns>
        TransactionResponse PayoutTransaction (Guid? transactionID);

        /// <summary>
        /// Creates a fake payout for transaction
        /// </summary>
        /// <remarks>
        /// This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60;</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        ApiResponse<TransactionResponse> PayoutTransactionWithHttpInfo (Guid? transactionID);
        /// <summary>
        /// Creates a new transaction
        /// </summary>
        /// <remarks>
        /// Transactions are the main objects in the BitPesa API, so it&#39;s important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC&#39;d and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>TransactionResponse</returns>
        TransactionResponse PostTransactions (TransactionRequest transactionRequest);

        /// <summary>
        /// Creates a new transaction
        /// </summary>
        /// <remarks>
        /// Transactions are the main objects in the BitPesa API, so it&#39;s important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC&#39;d and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        ApiResponse<TransactionResponse> PostTransactionsWithHttpInfo (TransactionRequest transactionRequest);
        /// <summary>
        /// Validates a transaction payload
        /// </summary>
        /// <remarks>
        /// Validates fields in a transaction payload and displays invalid or missing fields
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>TransactionResponse</returns>
        TransactionResponse ValidateTransactions (TransactionRequest transactionRequest);

        /// <summary>
        /// Validates a transaction payload
        /// </summary>
        /// <remarks>
        /// Validates fields in a transaction payload and displays invalid or missing fields
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        ApiResponse<TransactionResponse> ValidateTransactionsWithHttpInfo (TransactionRequest transactionRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Calculates transaction amounts for a transaction payload
        /// </summary>
        /// <remarks>
        /// Calculates the input, output and fee amounts for the recipients in a transaction payload
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>Task of TransactionResponse</returns>
        System.Threading.Tasks.Task<TransactionResponse> CalculateTransactionsAsync (TransactionRequest transactionRequest);

        /// <summary>
        /// Calculates transaction amounts for a transaction payload
        /// </summary>
        /// <remarks>
        /// Calculates the input, output and fee amounts for the recipients in a transaction payload
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> CalculateTransactionsAsyncWithHttpInfo (TransactionRequest transactionRequest);
        /// <summary>
        /// Fetch a single transaction
        /// </summary>
        /// <remarks>
        /// Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of TransactionResponse</returns>
        System.Threading.Tasks.Task<TransactionResponse> GetTransactionAsync (Guid? transactionID);

        /// <summary>
        /// Fetch a single transaction
        /// </summary>
        /// <remarks>
        /// Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> GetTransactionAsyncWithHttpInfo (Guid? transactionID);
        /// <summary>
        /// Get a list of transactions
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of the Transactions created by your API key.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>Task of TransactionListResponse</returns>
        System.Threading.Tasks.Task<TransactionListResponse> GetTransactionsAsync (int? page = null, int? per = null, string externalId = null);

        /// <summary>
        /// Get a list of transactions
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of the Transactions created by your API key.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (TransactionListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionListResponse>> GetTransactionsAsyncWithHttpInfo (int? page = null, int? per = null, string externalId = null);
        /// <summary>
        /// Creates a fake payin for transaction
        /// </summary>
        /// <remarks>
        /// This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60;</param>
        /// <param name="payinMethodRequest"></param>
        /// <returns>Task of TransactionResponse</returns>
        System.Threading.Tasks.Task<TransactionResponse> PayinTransactionAsync (Guid? transactionID, PayinMethodRequest payinMethodRequest);

        /// <summary>
        /// Creates a fake payin for transaction
        /// </summary>
        /// <remarks>
        /// This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60;</param>
        /// <param name="payinMethodRequest"></param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> PayinTransactionAsyncWithHttpInfo (Guid? transactionID, PayinMethodRequest payinMethodRequest);
        /// <summary>
        /// Creates a fake payout for transaction
        /// </summary>
        /// <remarks>
        /// This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60;</param>
        /// <returns>Task of TransactionResponse</returns>
        System.Threading.Tasks.Task<TransactionResponse> PayoutTransactionAsync (Guid? transactionID);

        /// <summary>
        /// Creates a fake payout for transaction
        /// </summary>
        /// <remarks>
        /// This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60;</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> PayoutTransactionAsyncWithHttpInfo (Guid? transactionID);
        /// <summary>
        /// Creates a new transaction
        /// </summary>
        /// <remarks>
        /// Transactions are the main objects in the BitPesa API, so it&#39;s important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC&#39;d and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>Task of TransactionResponse</returns>
        System.Threading.Tasks.Task<TransactionResponse> PostTransactionsAsync (TransactionRequest transactionRequest);

        /// <summary>
        /// Creates a new transaction
        /// </summary>
        /// <remarks>
        /// Transactions are the main objects in the BitPesa API, so it&#39;s important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC&#39;d and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> PostTransactionsAsyncWithHttpInfo (TransactionRequest transactionRequest);
        /// <summary>
        /// Validates a transaction payload
        /// </summary>
        /// <remarks>
        /// Validates fields in a transaction payload and displays invalid or missing fields
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>Task of TransactionResponse</returns>
        System.Threading.Tasks.Task<TransactionResponse> ValidateTransactionsAsync (TransactionRequest transactionRequest);

        /// <summary>
        /// Validates a transaction payload
        /// </summary>
        /// <remarks>
        /// Validates fields in a transaction payload and displays invalid or missing fields
        /// </remarks>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> ValidateTransactionsAsyncWithHttpInfo (TransactionRequest transactionRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionsApi : ITransactionsApi
    {
        private BitPesa.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionsApi(String basePath)
        {
            this.Configuration = new BitPesa.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = BitPesa.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TransactionsApi()
        {
            this.Configuration = BitPesa.Sdk.Client.Configuration.Default;

            ExceptionFactory = BitPesa.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionsApi(BitPesa.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = BitPesa.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BitPesa.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BitPesa.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BitPesa.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Calculates transaction amounts for a transaction payload Calculates the input, output and fee amounts for the recipients in a transaction payload
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>TransactionResponse</returns>
        public TransactionResponse CalculateTransactions (TransactionRequest transactionRequest)
        {
             ApiResponse<TransactionResponse> localVarResponse = CalculateTransactionsWithHttpInfo(transactionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculates transaction amounts for a transaction payload Calculates the input, output and fee amounts for the recipients in a transaction payload
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        public ApiResponse< TransactionResponse > CalculateTransactionsWithHttpInfo (TransactionRequest transactionRequest)
        {
            // verify the required parameter 'transactionRequest' is set
            if (transactionRequest == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequest' when calling TransactionsApi->CalculateTransactions");

            var localVarPath = "/transactions/calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequest != null && transactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Calculates transaction amounts for a transaction payload Calculates the input, output and fee amounts for the recipients in a transaction payload
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>Task of TransactionResponse</returns>
        public async System.Threading.Tasks.Task<TransactionResponse> CalculateTransactionsAsync (TransactionRequest transactionRequest)
        {
             ApiResponse<TransactionResponse> localVarResponse = await CalculateTransactionsAsyncWithHttpInfo(transactionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculates transaction amounts for a transaction payload Calculates the input, output and fee amounts for the recipients in a transaction payload
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> CalculateTransactionsAsyncWithHttpInfo (TransactionRequest transactionRequest)
        {
            // verify the required parameter 'transactionRequest' is set
            if (transactionRequest == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequest' when calling TransactionsApi->CalculateTransactions");

            var localVarPath = "/transactions/calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequest != null && transactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Fetch a single transaction Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>TransactionResponse</returns>
        public TransactionResponse GetTransaction (Guid? transactionID)
        {
             ApiResponse<TransactionResponse> localVarResponse = GetTransactionWithHttpInfo(transactionID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a single transaction Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        public ApiResponse< TransactionResponse > GetTransactionWithHttpInfo (Guid? transactionID)
        {
            // verify the required parameter 'transactionID' is set
            if (transactionID == null)
                throw new ApiException(400, "Missing required parameter 'transactionID' when calling TransactionsApi->GetTransaction");

            var localVarPath = "/transactions/{Transaction ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionID != null) localVarPathParams.Add("Transaction ID", this.Configuration.ApiClient.ParameterToString(transactionID)); // path parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Fetch a single transaction Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of TransactionResponse</returns>
        public async System.Threading.Tasks.Task<TransactionResponse> GetTransactionAsync (Guid? transactionID)
        {
             ApiResponse<TransactionResponse> localVarResponse = await GetTransactionAsyncWithHttpInfo(transactionID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch a single transaction Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> GetTransactionAsyncWithHttpInfo (Guid? transactionID)
        {
            // verify the required parameter 'transactionID' is set
            if (transactionID == null)
                throw new ApiException(400, "Missing required parameter 'transactionID' when calling TransactionsApi->GetTransaction");

            var localVarPath = "/transactions/{Transaction ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionID != null) localVarPathParams.Add("Transaction ID", this.Configuration.ApiClient.ParameterToString(transactionID)); // path parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Get a list of transactions Retrieves a paginated list of the Transactions created by your API key.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>TransactionListResponse</returns>
        public TransactionListResponse GetTransactions (int? page = null, int? per = null, string externalId = null)
        {
             ApiResponse<TransactionListResponse> localVarResponse = GetTransactionsWithHttpInfo(page, per, externalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of transactions Retrieves a paginated list of the Transactions created by your API key.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>ApiResponse of TransactionListResponse</returns>
        public ApiResponse< TransactionListResponse > GetTransactionsWithHttpInfo (int? page = null, int? per = null, string externalId = null)
        {

            var localVarPath = "/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (per != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per", per)); // query parameter
            if (externalId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_id", externalId)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionListResponse)));
        }

        /// <summary>
        /// Get a list of transactions Retrieves a paginated list of the Transactions created by your API key.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>Task of TransactionListResponse</returns>
        public async System.Threading.Tasks.Task<TransactionListResponse> GetTransactionsAsync (int? page = null, int? per = null, string externalId = null)
        {
             ApiResponse<TransactionListResponse> localVarResponse = await GetTransactionsAsyncWithHttpInfo(page, per, externalId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of transactions Retrieves a paginated list of the Transactions created by your API key.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="externalId">Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (TransactionListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionListResponse>> GetTransactionsAsyncWithHttpInfo (int? page = null, int? per = null, string externalId = null)
        {

            var localVarPath = "/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (per != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per", per)); // query parameter
            if (externalId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_id", externalId)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionListResponse)));
        }

        /// <summary>
        /// Creates a fake payin for transaction This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60;</param>
        /// <param name="payinMethodRequest"></param>
        /// <returns>TransactionResponse</returns>
        public TransactionResponse PayinTransaction (Guid? transactionID, PayinMethodRequest payinMethodRequest)
        {
             ApiResponse<TransactionResponse> localVarResponse = PayinTransactionWithHttpInfo(transactionID, payinMethodRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a fake payin for transaction This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60;</param>
        /// <param name="payinMethodRequest"></param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        public ApiResponse< TransactionResponse > PayinTransactionWithHttpInfo (Guid? transactionID, PayinMethodRequest payinMethodRequest)
        {
            // verify the required parameter 'transactionID' is set
            if (transactionID == null)
                throw new ApiException(400, "Missing required parameter 'transactionID' when calling TransactionsApi->PayinTransaction");
            // verify the required parameter 'payinMethodRequest' is set
            if (payinMethodRequest == null)
                throw new ApiException(400, "Missing required parameter 'payinMethodRequest' when calling TransactionsApi->PayinTransaction");

            var localVarPath = "/transactions/{Transaction ID}/payin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionID != null) localVarPathParams.Add("Transaction ID", this.Configuration.ApiClient.ParameterToString(transactionID)); // path parameter
            if (payinMethodRequest != null && payinMethodRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payinMethodRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payinMethodRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayinTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Creates a fake payin for transaction This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60;</param>
        /// <param name="payinMethodRequest"></param>
        /// <returns>Task of TransactionResponse</returns>
        public async System.Threading.Tasks.Task<TransactionResponse> PayinTransactionAsync (Guid? transactionID, PayinMethodRequest payinMethodRequest)
        {
             ApiResponse<TransactionResponse> localVarResponse = await PayinTransactionAsyncWithHttpInfo(transactionID, payinMethodRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a fake payin for transaction This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60;</param>
        /// <param name="payinMethodRequest"></param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> PayinTransactionAsyncWithHttpInfo (Guid? transactionID, PayinMethodRequest payinMethodRequest)
        {
            // verify the required parameter 'transactionID' is set
            if (transactionID == null)
                throw new ApiException(400, "Missing required parameter 'transactionID' when calling TransactionsApi->PayinTransaction");
            // verify the required parameter 'payinMethodRequest' is set
            if (payinMethodRequest == null)
                throw new ApiException(400, "Missing required parameter 'payinMethodRequest' when calling TransactionsApi->PayinTransaction");

            var localVarPath = "/transactions/{Transaction ID}/payin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionID != null) localVarPathParams.Add("Transaction ID", this.Configuration.ApiClient.ParameterToString(transactionID)); // path parameter
            if (payinMethodRequest != null && payinMethodRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payinMethodRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payinMethodRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayinTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Creates a fake payout for transaction This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60;</param>
        /// <returns>TransactionResponse</returns>
        public TransactionResponse PayoutTransaction (Guid? transactionID)
        {
             ApiResponse<TransactionResponse> localVarResponse = PayoutTransactionWithHttpInfo(transactionID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a fake payout for transaction This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60;</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        public ApiResponse< TransactionResponse > PayoutTransactionWithHttpInfo (Guid? transactionID)
        {
            // verify the required parameter 'transactionID' is set
            if (transactionID == null)
                throw new ApiException(400, "Missing required parameter 'transactionID' when calling TransactionsApi->PayoutTransaction");

            var localVarPath = "/transactions/{Transaction ID}/payout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionID != null) localVarPathParams.Add("Transaction ID", this.Configuration.ApiClient.ParameterToString(transactionID)); // path parameter

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayoutTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Creates a fake payout for transaction This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60;</param>
        /// <returns>Task of TransactionResponse</returns>
        public async System.Threading.Tasks.Task<TransactionResponse> PayoutTransactionAsync (Guid? transactionID)
        {
             ApiResponse<TransactionResponse> localVarResponse = await PayoutTransactionAsyncWithHttpInfo(transactionID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a fake payout for transaction This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionID">ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60;</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> PayoutTransactionAsyncWithHttpInfo (Guid? transactionID)
        {
            // verify the required parameter 'transactionID' is set
            if (transactionID == null)
                throw new ApiException(400, "Missing required parameter 'transactionID' when calling TransactionsApi->PayoutTransaction");

            var localVarPath = "/transactions/{Transaction ID}/payout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionID != null) localVarPathParams.Add("Transaction ID", this.Configuration.ApiClient.ParameterToString(transactionID)); // path parameter

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayoutTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Creates a new transaction Transactions are the main objects in the BitPesa API, so it&#39;s important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC&#39;d and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>TransactionResponse</returns>
        public TransactionResponse PostTransactions (TransactionRequest transactionRequest)
        {
             ApiResponse<TransactionResponse> localVarResponse = PostTransactionsWithHttpInfo(transactionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new transaction Transactions are the main objects in the BitPesa API, so it&#39;s important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC&#39;d and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        public ApiResponse< TransactionResponse > PostTransactionsWithHttpInfo (TransactionRequest transactionRequest)
        {
            // verify the required parameter 'transactionRequest' is set
            if (transactionRequest == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequest' when calling TransactionsApi->PostTransactions");

            var localVarPath = "/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequest != null && transactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Creates a new transaction Transactions are the main objects in the BitPesa API, so it&#39;s important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC&#39;d and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>Task of TransactionResponse</returns>
        public async System.Threading.Tasks.Task<TransactionResponse> PostTransactionsAsync (TransactionRequest transactionRequest)
        {
             ApiResponse<TransactionResponse> localVarResponse = await PostTransactionsAsyncWithHttpInfo(transactionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new transaction Transactions are the main objects in the BitPesa API, so it&#39;s important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC&#39;d and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> PostTransactionsAsyncWithHttpInfo (TransactionRequest transactionRequest)
        {
            // verify the required parameter 'transactionRequest' is set
            if (transactionRequest == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequest' when calling TransactionsApi->PostTransactions");

            var localVarPath = "/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequest != null && transactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Validates a transaction payload Validates fields in a transaction payload and displays invalid or missing fields
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>TransactionResponse</returns>
        public TransactionResponse ValidateTransactions (TransactionRequest transactionRequest)
        {
             ApiResponse<TransactionResponse> localVarResponse = ValidateTransactionsWithHttpInfo(transactionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validates a transaction payload Validates fields in a transaction payload and displays invalid or missing fields
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        public ApiResponse< TransactionResponse > ValidateTransactionsWithHttpInfo (TransactionRequest transactionRequest)
        {
            // verify the required parameter 'transactionRequest' is set
            if (transactionRequest == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequest' when calling TransactionsApi->ValidateTransactions");

            var localVarPath = "/transactions/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequest != null && transactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Validates a transaction payload Validates fields in a transaction payload and displays invalid or missing fields
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>Task of TransactionResponse</returns>
        public async System.Threading.Tasks.Task<TransactionResponse> ValidateTransactionsAsync (TransactionRequest transactionRequest)
        {
             ApiResponse<TransactionResponse> localVarResponse = await ValidateTransactionsAsyncWithHttpInfo(transactionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validates a transaction payload Validates fields in a transaction payload and displays invalid or missing fields
        /// </summary>
        /// <exception cref="BitPesa.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest"></param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> ValidateTransactionsAsyncWithHttpInfo (TransactionRequest transactionRequest)
        {
            // verify the required parameter 'transactionRequest' is set
            if (transactionRequest == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequest' when calling TransactionsApi->ValidateTransactions");

            var localVarPath = "/transactions/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequest != null && transactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

    }
}
