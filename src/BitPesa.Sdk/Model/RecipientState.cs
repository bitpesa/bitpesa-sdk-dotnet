/* 
 * BitPesa API
 *
 * Reference documentation for the BitPesa API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BitPesa.Sdk.Client.OpenAPIDateConverter;

namespace BitPesa.Sdk.Model
{
    /// <summary>
    /// The state of the recipient. Can be one of the following:  * &#x60;initial&#x60;: We haven&#39;t initiated the payout yet, you can still cancel the transaction * &#x60;pending&#x60;: Payout has been initiated and we&#39;re waiting from a response from the provider. The transaction cannot be cancelled * &#x60;success&#x60;: Payout is done, and the recipient has been paid. * &#x60;error&#x60;: There was an error from the provider, you can find more details in the &#x60;state_reason&#x60; attribute. We will usually retry the transaction at a later date. You can either wait, edit the recipient or cancel the transaction. * &#x60;refunded&#x60;: You asked us to cancel the transaction and we refunded the money. * &#x60;manual&#x60;: There were too many errors on this transaction, and we stopped retrying. Please edit the recipient, contact us or cancel the transaction. * &#x60;stuck&#x60;: We didn&#39;t receive a response from the provider in time, and we don&#39;t know whether it has been paid our not. Please contact us for further details. * &#x60;overpaid&#x60;: The recipient was paid out more than was requested (not applicable for most of the payout providers) * &#x60;canceled&#x60;: The transaction has been cancelled, and we will refund the money soon * &#x60;exception&#x60;: Some exception has happened; please contact BitPesa
    /// </summary>
    /// <value>The state of the recipient. Can be one of the following:  * &#x60;initial&#x60;: We haven&#39;t initiated the payout yet, you can still cancel the transaction * &#x60;pending&#x60;: Payout has been initiated and we&#39;re waiting from a response from the provider. The transaction cannot be cancelled * &#x60;success&#x60;: Payout is done, and the recipient has been paid. * &#x60;error&#x60;: There was an error from the provider, you can find more details in the &#x60;state_reason&#x60; attribute. We will usually retry the transaction at a later date. You can either wait, edit the recipient or cancel the transaction. * &#x60;refunded&#x60;: You asked us to cancel the transaction and we refunded the money. * &#x60;manual&#x60;: There were too many errors on this transaction, and we stopped retrying. Please edit the recipient, contact us or cancel the transaction. * &#x60;stuck&#x60;: We didn&#39;t receive a response from the provider in time, and we don&#39;t know whether it has been paid our not. Please contact us for further details. * &#x60;overpaid&#x60;: The recipient was paid out more than was requested (not applicable for most of the payout providers) * &#x60;canceled&#x60;: The transaction has been cancelled, and we will refund the money soon * &#x60;exception&#x60;: Some exception has happened; please contact BitPesa</value>
    
    [JsonConverter(typeof(StringEnumConverter))]
    
    public enum RecipientState
    {
        /// <summary>
        /// Enum Initial for value: initial
        /// </summary>
        [EnumMember(Value = "initial")]
        Initial = 1,

        /// <summary>
        /// Enum Pending for value: pending
        /// </summary>
        [EnumMember(Value = "pending")]
        Pending = 2,

        /// <summary>
        /// Enum Success for value: success
        /// </summary>
        [EnumMember(Value = "success")]
        Success = 3,

        /// <summary>
        /// Enum Error for value: error
        /// </summary>
        [EnumMember(Value = "error")]
        Error = 4,

        /// <summary>
        /// Enum Refunded for value: refunded
        /// </summary>
        [EnumMember(Value = "refunded")]
        Refunded = 5,

        /// <summary>
        /// Enum Manual for value: manual
        /// </summary>
        [EnumMember(Value = "manual")]
        Manual = 6,

        /// <summary>
        /// Enum Stuck for value: stuck
        /// </summary>
        [EnumMember(Value = "stuck")]
        Stuck = 7,

        /// <summary>
        /// Enum Overpaid for value: overpaid
        /// </summary>
        [EnumMember(Value = "overpaid")]
        Overpaid = 8,

        /// <summary>
        /// Enum Canceled for value: canceled
        /// </summary>
        [EnumMember(Value = "canceled")]
        Canceled = 9,

        /// <summary>
        /// Enum Exception for value: exception
        /// </summary>
        [EnumMember(Value = "exception")]
        Exception = 10

    }

}
