/* 
 * BitPesa API
 *
 * Reference documentation for the BitPesa API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BitPesa.Sdk.Client.OpenAPIDateConverter;

namespace BitPesa.Sdk.Model
{
    /// <summary>
    /// Currency
    /// </summary>
    [DataContract]
    public partial class Currency :  IEquatable<Currency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Currency" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Currency()
        {
        }
        
        /// <summary>
        /// The currency code in 3-character alpha ISO 4217 currency format
        /// </summary>
        /// <value>The currency code in 3-character alpha ISO 4217 currency format</value>
        [DataMember(Name="code", EmitDefaultValue=)]
        public string Code { get; private set; }

        /// <summary>
        /// Name of currency
        /// </summary>
        /// <value>Name of currency</value>
        [DataMember(Name="name", EmitDefaultValue=)]
        public string Name { get; private set; }

        /// <summary>
        /// Symbol of currency
        /// </summary>
        /// <value>Symbol of currency</value>
        [DataMember(Name="symbol", EmitDefaultValue=)]
        public string Symbol { get; private set; }

        /// <summary>
        /// Number of decimal points
        /// </summary>
        /// <value>Number of decimal points</value>
        [DataMember(Name="decimals", EmitDefaultValue=)]
        public decimal? Decimals { get; private set; }

        /// <summary>
        /// Subunits in Unit (eg. there are 100 cents in 1 US Dollar)
        /// </summary>
        /// <value>Subunits in Unit (eg. there are 100 cents in 1 US Dollar)</value>
        [DataMember(Name="subunit_to_unit", EmitDefaultValue=)]
        public string SubunitToUnit { get; private set; }

        /// <summary>
        /// Is this a primary currency?
        /// </summary>
        /// <value>Is this a primary currency?</value>
        [DataMember(Name="primary", EmitDefaultValue=)]
        public bool? Primary { get; private set; }

        /// <summary>
        /// The minimum amount allowed in a transaction
        /// </summary>
        /// <value>The minimum amount allowed in a transaction</value>
        [DataMember(Name="min", EmitDefaultValue=)]
        public string Min { get; private set; }

        /// <summary>
        /// The maximum amount allowed in a transaction
        /// </summary>
        /// <value>The maximum amount allowed in a transaction</value>
        [DataMember(Name="max", EmitDefaultValue=)]
        public string Max { get; private set; }

        /// <summary>
        /// The margin set for transactions in this currency
        /// </summary>
        /// <value>The margin set for transactions in this currency</value>
        [DataMember(Name="margin", EmitDefaultValue=)]
        public string Margin { get; private set; }

        /// <summary>
        /// The equivalent of the currency to 1 USD
        /// </summary>
        /// <value>The equivalent of the currency to 1 USD</value>
        [DataMember(Name="usd_equivalent", EmitDefaultValue=)]
        public string UsdEquivalent { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Currency {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  SubunitToUnit: ").Append(SubunitToUnit).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  UsdEquivalent: ").Append(UsdEquivalent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Currency);
        }

        /// <summary>
        /// Returns true if Currency instances are equal
        /// </summary>
        /// <param name="input">Instance of Currency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Currency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Decimals == input.Decimals ||
                    (this.Decimals != null &&
                    this.Decimals.Equals(input.Decimals))
                ) && 
                (
                    this.SubunitToUnit == input.SubunitToUnit ||
                    (this.SubunitToUnit != null &&
                    this.SubunitToUnit.Equals(input.SubunitToUnit))
                ) && 
                (
                    this.Primary == input.Primary ||
                    (this.Primary != null &&
                    this.Primary.Equals(input.Primary))
                ) && 
                (
                    this.Min == input.Min ||
                    (this.Min != null &&
                    this.Min.Equals(input.Min))
                ) && 
                (
                    this.Max == input.Max ||
                    (this.Max != null &&
                    this.Max.Equals(input.Max))
                ) && 
                (
                    this.Margin == input.Margin ||
                    (this.Margin != null &&
                    this.Margin.Equals(input.Margin))
                ) && 
                (
                    this.UsdEquivalent == input.UsdEquivalent ||
                    (this.UsdEquivalent != null &&
                    this.UsdEquivalent.Equals(input.UsdEquivalent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Decimals != null)
                    hashCode = hashCode * 59 + this.Decimals.GetHashCode();
                if (this.SubunitToUnit != null)
                    hashCode = hashCode * 59 + this.SubunitToUnit.GetHashCode();
                if (this.Primary != null)
                    hashCode = hashCode * 59 + this.Primary.GetHashCode();
                if (this.Min != null)
                    hashCode = hashCode * 59 + this.Min.GetHashCode();
                if (this.Max != null)
                    hashCode = hashCode * 59 + this.Max.GetHashCode();
                if (this.Margin != null)
                    hashCode = hashCode * 59 + this.Margin.GetHashCode();
                if (this.UsdEquivalent != null)
                    hashCode = hashCode * 59 + this.UsdEquivalent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
