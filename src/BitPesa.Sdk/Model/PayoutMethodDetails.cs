/* 
 * BitPesa API
 *
 * Reference documentation for the BitPesa API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BitPesa.Sdk.Client.OpenAPIDateConverter;

namespace BitPesa.Sdk.Model
{
    /// <summary>
    /// PayoutMethodDetails
    /// </summary>
    [DataContract]
    public partial class PayoutMethodDetails :  IEquatable<PayoutMethodDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutMethodDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PayoutMethodDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutMethodDetails" /> class.
        /// </summary>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="bankCode">bankCode (required).</param>
        /// <param name="bankAccount">bankAccount (required).</param>
        /// <param name="bankAccountType">bankAccountType (required).</param>
        /// <param name="phoneNumber">phoneNumber (required).</param>
        /// <param name="mobileProvider">mobileProvider (required).</param>
        /// <param name="bankName">bankName (required).</param>
        /// <param name="iban">iban (required).</param>
        /// <param name="bic">bic.</param>
        /// <param name="senderIdentityCardType">senderIdentityCardType (required).</param>
        /// <param name="senderIdentityCardId">senderIdentityCardId (required).</param>
        /// <param name="senderCityOfBirth">senderCityOfBirth (required).</param>
        /// <param name="senderCountryOfBirth">senderCountryOfBirth (required).</param>
        /// <param name="senderGender">senderGender (required).</param>
        /// <param name="reason">reason.</param>
        /// <param name="identityCardType">identityCardType.</param>
        /// <param name="identityCardId">identityCardId.</param>
        /// <param name="reference">reference.</param>
        public PayoutMethodDetails(string firstName = default(string), string lastName = default(string), string bankCode = default(string), string bankAccount = default(string), PayoutMethodBankAccountTypeEnum bankAccountType = default(PayoutMethodBankAccountTypeEnum), string phoneNumber = default(string), PayoutMethodMobileProviderEnum mobileProvider = default(PayoutMethodMobileProviderEnum), string bankName = default(string), string iban = default(string), string bic = default(string), PayoutMethodIdentityCardTypeEnum senderIdentityCardType = default(PayoutMethodIdentityCardTypeEnum), string senderIdentityCardId = default(string), string senderCityOfBirth = default(string), string senderCountryOfBirth = default(string), PayoutMethodGenderEnum senderGender = default(PayoutMethodGenderEnum), string reason = default(string), PayoutMethodIdentityCardTypeEnum identityCardType = default(PayoutMethodIdentityCardTypeEnum), string identityCardId = default(string), string reference = default(string))
        {
            this.FirstName = firstName;
            this.LastName = lastName;
            this.BankCode = bankCode;
            this.BankAccount = bankAccount;
            this.BankAccountType = bankAccountType;
            this.PhoneNumber = phoneNumber;
            this.MobileProvider = mobileProvider;
            this.BankName = bankName;
            this.Iban = iban;
            this.SenderIdentityCardType = senderIdentityCardType;
            this.SenderIdentityCardId = senderIdentityCardId;
            this.SenderCityOfBirth = senderCityOfBirth;
            this.SenderCountryOfBirth = senderCountryOfBirth;
            this.SenderGender = senderGender;
            this.Bic = bic;
            this.Reason = reason;
            this.IdentityCardType = identityCardType;
            this.IdentityCardId = identityCardId;
            this.Reference = reference;
        }
        
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="first_name", EmitDefaultValue=)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="last_name", EmitDefaultValue=)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets BankCode
        /// </summary>
        [DataMember(Name="bank_code", EmitDefaultValue=)]
        public string BankCode { get; set; }

        /// <summary>
        /// Gets or Sets BankAccount
        /// </summary>
        [DataMember(Name="bank_account", EmitDefaultValue=)]
        public string BankAccount { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountType
        /// </summary>
        [DataMember(Name="bank_account_type", EmitDefaultValue=)]
        public PayoutMethodBankAccountTypeEnum BankAccountType { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phone_number", EmitDefaultValue=)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets MobileProvider
        /// </summary>
        [DataMember(Name="mobile_provider", EmitDefaultValue=)]
        public PayoutMethodMobileProviderEnum MobileProvider { get; set; }

        /// <summary>
        /// Gets or Sets BankName
        /// </summary>
        [DataMember(Name="bank_name", EmitDefaultValue=)]
        public string BankName { get; set; }

        /// <summary>
        /// Gets or Sets Iban
        /// </summary>
        [DataMember(Name="iban", EmitDefaultValue=)]
        public string Iban { get; set; }

        /// <summary>
        /// Gets or Sets Bic
        /// </summary>
        [DataMember(Name="bic", EmitDefaultValue=)]
        public string Bic { get; set; }

        /// <summary>
        /// Gets or Sets SenderIdentityCardType
        /// </summary>
        [DataMember(Name="sender_identity_card_type", EmitDefaultValue=)]
        public PayoutMethodIdentityCardTypeEnum SenderIdentityCardType { get; set; }

        /// <summary>
        /// Gets or Sets SenderIdentityCardId
        /// </summary>
        [DataMember(Name="sender_identity_card_id", EmitDefaultValue=)]
        public string SenderIdentityCardId { get; set; }

        /// <summary>
        /// Gets or Sets SenderCityOfBirth
        /// </summary>
        [DataMember(Name="sender_city_of_birth", EmitDefaultValue=)]
        public string SenderCityOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets SenderCountryOfBirth
        /// </summary>
        [DataMember(Name="sender_country_of_birth", EmitDefaultValue=)]
        public string SenderCountryOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets SenderGender
        /// </summary>
        [DataMember(Name="sender_gender", EmitDefaultValue=)]
        public PayoutMethodGenderEnum SenderGender { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason", EmitDefaultValue=)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets IdentityCardType
        /// </summary>
        [DataMember(Name="identity_card_type", EmitDefaultValue=)]
        public PayoutMethodIdentityCardTypeEnum IdentityCardType { get; set; }

        /// <summary>
        /// Gets or Sets IdentityCardId
        /// </summary>
        [DataMember(Name="identity_card_id", EmitDefaultValue=)]
        public string IdentityCardId { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=)]
        public string Reference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayoutMethodDetails {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  BankAccount: ").Append(BankAccount).Append("\n");
            sb.Append("  BankAccountType: ").Append(BankAccountType).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  MobileProvider: ").Append(MobileProvider).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Bic: ").Append(Bic).Append("\n");
            sb.Append("  SenderIdentityCardType: ").Append(SenderIdentityCardType).Append("\n");
            sb.Append("  SenderIdentityCardId: ").Append(SenderIdentityCardId).Append("\n");
            sb.Append("  SenderCityOfBirth: ").Append(SenderCityOfBirth).Append("\n");
            sb.Append("  SenderCountryOfBirth: ").Append(SenderCountryOfBirth).Append("\n");
            sb.Append("  SenderGender: ").Append(SenderGender).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  IdentityCardType: ").Append(IdentityCardType).Append("\n");
            sb.Append("  IdentityCardId: ").Append(IdentityCardId).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayoutMethodDetails);
        }

        /// <summary>
        /// Returns true if PayoutMethodDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PayoutMethodDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayoutMethodDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.BankCode == input.BankCode ||
                    (this.BankCode != null &&
                    this.BankCode.Equals(input.BankCode))
                ) && 
                (
                    this.BankAccount == input.BankAccount ||
                    (this.BankAccount != null &&
                    this.BankAccount.Equals(input.BankAccount))
                ) && 
                (
                    this.BankAccountType == input.BankAccountType ||
                    (this.BankAccountType != null &&
                    this.BankAccountType.Equals(input.BankAccountType))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.MobileProvider == input.MobileProvider ||
                    (this.MobileProvider != null &&
                    this.MobileProvider.Equals(input.MobileProvider))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.Iban == input.Iban ||
                    (this.Iban != null &&
                    this.Iban.Equals(input.Iban))
                ) && 
                (
                    this.Bic == input.Bic ||
                    (this.Bic != null &&
                    this.Bic.Equals(input.Bic))
                ) && 
                (
                    this.SenderIdentityCardType == input.SenderIdentityCardType ||
                    (this.SenderIdentityCardType != null &&
                    this.SenderIdentityCardType.Equals(input.SenderIdentityCardType))
                ) && 
                (
                    this.SenderIdentityCardId == input.SenderIdentityCardId ||
                    (this.SenderIdentityCardId != null &&
                    this.SenderIdentityCardId.Equals(input.SenderIdentityCardId))
                ) && 
                (
                    this.SenderCityOfBirth == input.SenderCityOfBirth ||
                    (this.SenderCityOfBirth != null &&
                    this.SenderCityOfBirth.Equals(input.SenderCityOfBirth))
                ) && 
                (
                    this.SenderCountryOfBirth == input.SenderCountryOfBirth ||
                    (this.SenderCountryOfBirth != null &&
                    this.SenderCountryOfBirth.Equals(input.SenderCountryOfBirth))
                ) && 
                (
                    this.SenderGender == input.SenderGender ||
                    (this.SenderGender != null &&
                    this.SenderGender.Equals(input.SenderGender))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.IdentityCardType == input.IdentityCardType ||
                    (this.IdentityCardType != null &&
                    this.IdentityCardType.Equals(input.IdentityCardType))
                ) && 
                (
                    this.IdentityCardId == input.IdentityCardId ||
                    (this.IdentityCardId != null &&
                    this.IdentityCardId.Equals(input.IdentityCardId))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.BankCode != null)
                    hashCode = hashCode * 59 + this.BankCode.GetHashCode();
                if (this.BankAccount != null)
                    hashCode = hashCode * 59 + this.BankAccount.GetHashCode();
                if (this.BankAccountType != null)
                    hashCode = hashCode * 59 + this.BankAccountType.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.MobileProvider != null)
                    hashCode = hashCode * 59 + this.MobileProvider.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.Iban != null)
                    hashCode = hashCode * 59 + this.Iban.GetHashCode();
                if (this.Bic != null)
                    hashCode = hashCode * 59 + this.Bic.GetHashCode();
                if (this.SenderIdentityCardType != null)
                    hashCode = hashCode * 59 + this.SenderIdentityCardType.GetHashCode();
                if (this.SenderIdentityCardId != null)
                    hashCode = hashCode * 59 + this.SenderIdentityCardId.GetHashCode();
                if (this.SenderCityOfBirth != null)
                    hashCode = hashCode * 59 + this.SenderCityOfBirth.GetHashCode();
                if (this.SenderCountryOfBirth != null)
                    hashCode = hashCode * 59 + this.SenderCountryOfBirth.GetHashCode();
                if (this.SenderGender != null)
                    hashCode = hashCode * 59 + this.SenderGender.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.IdentityCardType != null)
                    hashCode = hashCode * 59 + this.IdentityCardType.GetHashCode();
                if (this.IdentityCardId != null)
                    hashCode = hashCode * 59 + this.IdentityCardId.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
