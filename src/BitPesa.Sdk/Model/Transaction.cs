/* 
 * BitPesa API
 *
 * Reference documentation for the BitPesa API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BitPesa.Sdk.Client.OpenAPIDateConverter;

namespace BitPesa.Sdk.Model
{
    /// <summary>
    /// The template of transactions are the following: &#x60;&#x60;&#x60;JSON {   \&quot;input_currency\&quot;: // currency to pay in,   \&quot;sender\&quot;:{     // details of the sender   },   \&quot;recipients\&quot;:[     {         \&quot;requested_amount\&quot;: // the amount to pay out,         \&quot;requested_currency\&quot;: // the currency of the amount,         \&quot;payout_method\&quot;:{           \&quot;type\&quot;: // method of the payout,           \&quot;details\&quot;:{               // details of the recipient           }         }     }   ],   \&quot;metadata\&quot;: // optional metadata } &#x60;&#x60;&#x60;
    /// </summary>
    [DataContract]
    public partial class Transaction :  IEquatable<Transaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Transaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        /// <param name="inputCurrency">The input currency describes what currency the transaction will be paid in (3-character alpha ISO 4217 currency format). For example if you wish to create an EUR to NGN transaction then input currency should be set to EUR. (required).</param>
        /// <param name="payinMethods">Allows setting alternative collections, where funding the transaction is done through alternative means and not via account balance.  For more information please see [Collections from senders](https://github.com/bitpesa/api-documentation/blob/master/additional-features.md#collections-from-senders) in the API documentation.</param>
        /// <param name="metadata">Additional metadata to store on the transaction. If you widh to store your local transaction ID, you should add it here inside a &#x60;sendRef&#x60; field, and we will return this value back to you in the daily transaction reports..</param>
        /// <param name="sender">sender (required).</param>
        /// <param name="recipients">The details of where the payment should go. although transactions can support paying out multiple recipients, usually one is provided.  (required).</param>
        /// <param name="traits">traits.</param>
        /// <param name="state">state.</param>
        /// <param name="externalId">Optional ID that is supplied by partner linking it to the partner&#39;s own Sender ID. Note: if present we will validate whether the sent ID is a duplicate in our system or not..</param>
        public Transaction(string inputCurrency = default(string), List<PayinMethod> payinMethods = default(List<PayinMethod>), Object metadata = default(Object), Sender sender = default(Sender), List<Recipient> recipients = default(List<Recipient>), TransactionTraits traits = default(TransactionTraits), TransactionState state = default(TransactionState), string externalId = default(string))
        {
            this.InputCurrency = inputCurrency;
            this.Sender = sender;
            this.Recipients = recipients;
            this.PayinMethods = payinMethods;
            this.Metadata = metadata;
            this.Traits = traits;
            this.State = state;
            this.ExternalId = externalId;
        }
        
        /// <summary>
        /// The input currency describes what currency the transaction will be paid in (3-character alpha ISO 4217 currency format). For example if you wish to create an EUR to NGN transaction then input currency should be set to EUR.
        /// </summary>
        /// <value>The input currency describes what currency the transaction will be paid in (3-character alpha ISO 4217 currency format). For example if you wish to create an EUR to NGN transaction then input currency should be set to EUR.</value>
        [DataMember(Name="input_currency", EmitDefaultValue=false)]
        public string InputCurrency { get; set; }

        /// <summary>
        /// Allows setting alternative collections, where funding the transaction is done through alternative means and not via account balance.  For more information please see [Collections from senders](https://github.com/bitpesa/api-documentation/blob/master/additional-features.md#collections-from-senders) in the API documentation
        /// </summary>
        /// <value>Allows setting alternative collections, where funding the transaction is done through alternative means and not via account balance.  For more information please see [Collections from senders](https://github.com/bitpesa/api-documentation/blob/master/additional-features.md#collections-from-senders) in the API documentation</value>
        [DataMember(Name="payin_methods", EmitDefaultValue=false)]
        public List<PayinMethod> PayinMethods { get; set; }

        /// <summary>
        /// Additional metadata to store on the transaction. If you widh to store your local transaction ID, you should add it here inside a &#x60;sendRef&#x60; field, and we will return this value back to you in the daily transaction reports.
        /// </summary>
        /// <value>Additional metadata to store on the transaction. If you widh to store your local transaction ID, you should add it here inside a &#x60;sendRef&#x60; field, and we will return this value back to you in the daily transaction reports.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name="sender", EmitDefaultValue=false)]
        public Sender Sender { get; set; }

        /// <summary>
        /// The details of where the payment should go. although transactions can support paying out multiple recipients, usually one is provided. 
        /// </summary>
        /// <value>The details of where the payment should go. although transactions can support paying out multiple recipients, usually one is provided. </value>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public List<Recipient> Recipients { get; set; }

        /// <summary>
        /// Gets or Sets Traits
        /// </summary>
        [DataMember(Name="traits", EmitDefaultValue=false)]
        public TransactionTraits Traits { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public TransactionState State { get; set; }

        /// <summary>
        /// The amount that was requested in the input currency
        /// </summary>
        /// <value>The amount that was requested in the input currency</value>
        [DataMember(Name="input_amount", EmitDefaultValue=false)]
        public decimal? InputAmount { get; private set; }

        /// <summary>
        /// The reference number that has to be provided in case the transaction is not funded through account balance
        /// </summary>
        /// <value>The reference number that has to be provided in case the transaction is not funded through account balance</value>
        [DataMember(Name="payin_reference", EmitDefaultValue=false)]
        public string PayinReference { get; private set; }

        /// <summary>
        /// The amount that was already paid in to the transaction
        /// </summary>
        /// <value>The amount that was already paid in to the transaction</value>
        [DataMember(Name="paid_amount", EmitDefaultValue=false)]
        public decimal? PaidAmount { get; private set; }

        /// <summary>
        /// The amount needed to be paid in for the transaction to get funded
        /// </summary>
        /// <value>The amount needed to be paid in for the transaction to get funded</value>
        [DataMember(Name="due_amount", EmitDefaultValue=false)]
        public decimal? DueAmount { get; private set; }

        /// <summary>
        /// The time the transaction was created
        /// </summary>
        /// <value>The time the transaction was created</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// The latest time when the transaction has to be funded, otherwise it will be cancelled
        /// </summary>
        /// <value>The latest time when the transaction has to be funded, otherwise it will be cancelled</value>
        [DataMember(Name="expires_at", EmitDefaultValue=false)]
        public DateTime? ExpiresAt { get; private set; }

        /// <summary>
        /// Optional ID that is supplied by partner linking it to the partner&#39;s own Sender ID. Note: if present we will validate whether the sent ID is a duplicate in our system or not.
        /// </summary>
        /// <value>Optional ID that is supplied by partner linking it to the partner&#39;s own Sender ID. Note: if present we will validate whether the sent ID is a duplicate in our system or not.</value>
        [DataMember(Name="external_id", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; private set; }

        /// <summary>
        /// The fields that have some problems and don&#39;t pass validation
        /// </summary>
        /// <value>The fields that have some problems and don&#39;t pass validation</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public Dictionary<string, List<ValidationErrorDescription>> Errors { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  InputCurrency: ").Append(InputCurrency).Append("\n");
            sb.Append("  PayinMethods: ").Append(PayinMethods).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Traits: ").Append(Traits).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  InputAmount: ").Append(InputAmount).Append("\n");
            sb.Append("  PayinReference: ").Append(PayinReference).Append("\n");
            sb.Append("  PaidAmount: ").Append(PaidAmount).Append("\n");
            sb.Append("  DueAmount: ").Append(DueAmount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transaction);
        }

        /// <summary>
        /// Returns true if Transaction instances are equal
        /// </summary>
        /// <param name="input">Instance of Transaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputCurrency == input.InputCurrency ||
                    (this.InputCurrency != null &&
                    this.InputCurrency.Equals(input.InputCurrency))
                ) && 
                (
                    this.PayinMethods == input.PayinMethods ||
                    this.PayinMethods != null &&
                    this.PayinMethods.SequenceEqual(input.PayinMethods)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                ) && 
                (
                    this.Traits == input.Traits ||
                    (this.Traits != null &&
                    this.Traits.Equals(input.Traits))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.InputAmount == input.InputAmount ||
                    (this.InputAmount != null &&
                    this.InputAmount.Equals(input.InputAmount))
                ) && 
                (
                    this.PayinReference == input.PayinReference ||
                    (this.PayinReference != null &&
                    this.PayinReference.Equals(input.PayinReference))
                ) && 
                (
                    this.PaidAmount == input.PaidAmount ||
                    (this.PaidAmount != null &&
                    this.PaidAmount.Equals(input.PaidAmount))
                ) && 
                (
                    this.DueAmount == input.DueAmount ||
                    (this.DueAmount != null &&
                    this.DueAmount.Equals(input.DueAmount))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputCurrency != null)
                    hashCode = hashCode * 59 + this.InputCurrency.GetHashCode();
                if (this.PayinMethods != null)
                    hashCode = hashCode * 59 + this.PayinMethods.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                if (this.Traits != null)
                    hashCode = hashCode * 59 + this.Traits.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.InputAmount != null)
                    hashCode = hashCode * 59 + this.InputAmount.GetHashCode();
                if (this.PayinReference != null)
                    hashCode = hashCode * 59 + this.PayinReference.GetHashCode();
                if (this.PaidAmount != null)
                    hashCode = hashCode * 59 + this.PaidAmount.GetHashCode();
                if (this.DueAmount != null)
                    hashCode = hashCode * 59 + this.DueAmount.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
