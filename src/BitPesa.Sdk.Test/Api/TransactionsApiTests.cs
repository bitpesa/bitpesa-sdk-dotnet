/* 
 * BitPesa API
 *
 * Reference documentation for the BitPesa API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using BitPesa.Sdk.Client;
using BitPesa.Sdk.Api;
using BitPesa.Sdk.Model;

namespace BitPesa.Sdk.Test
{
    /// <summary>
    ///  Class for testing TransactionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TransactionsApiTests
    {
        private TransactionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TransactionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TransactionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TransactionsApi
            //Assert.IsInstanceOfType(typeof(TransactionsApi), instance, "instance is a TransactionsApi");
        }

        
        /// <summary>
        /// Test CalculateTransactions
        /// </summary>
        [Test]
        public void CalculateTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionRequest transactionRequest = null;
            //var response = instance.CalculateTransactions(transactionRequest);
            //Assert.IsInstanceOf<TransactionResponse> (response, "response is TransactionResponse");
        }
        
        /// <summary>
        /// Test GetTransaction
        /// </summary>
        [Test]
        public void GetTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? transactionID = null;
            //var response = instance.GetTransaction(transactionID);
            //Assert.IsInstanceOf<TransactionResponse> (response, "response is TransactionResponse");
        }
        
        /// <summary>
        /// Test GetTransactions
        /// </summary>
        [Test]
        public void GetTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? per = null;
            //string externalId = null;
            //var response = instance.GetTransactions(page, per, externalId);
            //Assert.IsInstanceOf<TransactionListResponse> (response, "response is TransactionListResponse");
        }
        
        /// <summary>
        /// Test PayinTransaction
        /// </summary>
        [Test]
        public void PayinTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? transactionID = null;
            //PayinMethodRequest payinMethodRequest = null;
            //var response = instance.PayinTransaction(transactionID, payinMethodRequest);
            //Assert.IsInstanceOf<TransactionResponse> (response, "response is TransactionResponse");
        }
        
        /// <summary>
        /// Test PayoutTransaction
        /// </summary>
        [Test]
        public void PayoutTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? transactionID = null;
            //var response = instance.PayoutTransaction(transactionID);
            //Assert.IsInstanceOf<TransactionResponse> (response, "response is TransactionResponse");
        }
        
        /// <summary>
        /// Test PostTransactions
        /// </summary>
        [Test]
        public void PostTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionRequest transactionRequest = null;
            //var response = instance.PostTransactions(transactionRequest);
            //Assert.IsInstanceOf<TransactionResponse> (response, "response is TransactionResponse");
        }
        
        /// <summary>
        /// Test ValidateTransactions
        /// </summary>
        [Test]
        public void ValidateTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionRequest transactionRequest = null;
            //var response = instance.ValidateTransactions(transactionRequest);
            //Assert.IsInstanceOf<TransactionResponse> (response, "response is TransactionResponse");
        }
        
    }

}
