/* 
 * TransferZero API
 *
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TransferZero.Sdk.Client;
using TransferZero.Sdk.Model;

namespace TransferZero.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountDebitsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetching an account debit
        /// </summary>
        /// <remarks>
        /// Returns a single account debit by the account debit ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountDebitID">ID of the account debit to get.  Example: &#x60;/v1/accounts/debits/9170c890-1a45-46bd-9b79-3deeb8b4ff3d&#x60;</param>
        /// <returns>DebitResponse</returns>
        DebitResponse GetAccountsDebit (Guid? accountDebitID);

        /// <summary>
        /// Fetching an account debit
        /// </summary>
        /// <remarks>
        /// Returns a single account debit by the account debit ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountDebitID">ID of the account debit to get.  Example: &#x60;/v1/accounts/debits/9170c890-1a45-46bd-9b79-3deeb8b4ff3d&#x60;</param>
        /// <returns>ApiResponse of DebitResponse</returns>
        ApiResponse<DebitResponse> GetAccountsDebitWithHttpInfo (Guid? accountDebitID);
        /// <summary>
        /// Listing Accounts debits
        /// </summary>
        /// <remarks>
        /// Get a list of accounts debits
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>DebitListResponse</returns>
        DebitListResponse GetAccountsDebits (int? page = null, int? per = null);

        /// <summary>
        /// Listing Accounts debits
        /// </summary>
        /// <remarks>
        /// Get a list of accounts debits
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>ApiResponse of DebitListResponse</returns>
        ApiResponse<DebitListResponse> GetAccountsDebitsWithHttpInfo (int? page = null, int? per = null);
        /// <summary>
        /// Creating an account debit
        /// </summary>
        /// <remarks>
        /// Creates a new account debit finding transaction through the internal balance  To successfully fund a transaction - - The currency needs to be the same as the input_currency on the transaction - The amount has to be the same as the input_amount on the transaction - The to_id is the id of the transaction - You need to have enough balance of the appropriate currency inside your wallet  Once the transaction is funded, we will immediately start trying to pay out the recipient(s).  It is also possible to create multiple account debits by supplying an array of debit objects 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitRequestWrapper"></param>
        /// <returns>DebitListResponse</returns>
        DebitListResponse PostAccountsDebits (DebitRequestWrapper debitRequestWrapper);

        /// <summary>
        /// Creating an account debit
        /// </summary>
        /// <remarks>
        /// Creates a new account debit finding transaction through the internal balance  To successfully fund a transaction - - The currency needs to be the same as the input_currency on the transaction - The amount has to be the same as the input_amount on the transaction - The to_id is the id of the transaction - You need to have enough balance of the appropriate currency inside your wallet  Once the transaction is funded, we will immediately start trying to pay out the recipient(s).  It is also possible to create multiple account debits by supplying an array of debit objects 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitRequestWrapper"></param>
        /// <returns>ApiResponse of DebitListResponse</returns>
        ApiResponse<DebitListResponse> PostAccountsDebitsWithHttpInfo (DebitRequestWrapper debitRequestWrapper);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Fetching an account debit
        /// </summary>
        /// <remarks>
        /// Returns a single account debit by the account debit ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountDebitID">ID of the account debit to get.  Example: &#x60;/v1/accounts/debits/9170c890-1a45-46bd-9b79-3deeb8b4ff3d&#x60;</param>
        /// <returns>Task of DebitResponse</returns>
        System.Threading.Tasks.Task<DebitResponse> GetAccountsDebitAsync (Guid? accountDebitID);

        /// <summary>
        /// Fetching an account debit
        /// </summary>
        /// <remarks>
        /// Returns a single account debit by the account debit ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountDebitID">ID of the account debit to get.  Example: &#x60;/v1/accounts/debits/9170c890-1a45-46bd-9b79-3deeb8b4ff3d&#x60;</param>
        /// <returns>Task of ApiResponse (DebitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DebitResponse>> GetAccountsDebitAsyncWithHttpInfo (Guid? accountDebitID);
        /// <summary>
        /// Listing Accounts debits
        /// </summary>
        /// <remarks>
        /// Get a list of accounts debits
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>Task of DebitListResponse</returns>
        System.Threading.Tasks.Task<DebitListResponse> GetAccountsDebitsAsync (int? page = null, int? per = null);

        /// <summary>
        /// Listing Accounts debits
        /// </summary>
        /// <remarks>
        /// Get a list of accounts debits
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>Task of ApiResponse (DebitListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DebitListResponse>> GetAccountsDebitsAsyncWithHttpInfo (int? page = null, int? per = null);
        /// <summary>
        /// Creating an account debit
        /// </summary>
        /// <remarks>
        /// Creates a new account debit finding transaction through the internal balance  To successfully fund a transaction - - The currency needs to be the same as the input_currency on the transaction - The amount has to be the same as the input_amount on the transaction - The to_id is the id of the transaction - You need to have enough balance of the appropriate currency inside your wallet  Once the transaction is funded, we will immediately start trying to pay out the recipient(s).  It is also possible to create multiple account debits by supplying an array of debit objects 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitRequestWrapper"></param>
        /// <returns>Task of DebitListResponse</returns>
        System.Threading.Tasks.Task<DebitListResponse> PostAccountsDebitsAsync (DebitRequestWrapper debitRequestWrapper);

        /// <summary>
        /// Creating an account debit
        /// </summary>
        /// <remarks>
        /// Creates a new account debit finding transaction through the internal balance  To successfully fund a transaction - - The currency needs to be the same as the input_currency on the transaction - The amount has to be the same as the input_amount on the transaction - The to_id is the id of the transaction - You need to have enough balance of the appropriate currency inside your wallet  Once the transaction is funded, we will immediately start trying to pay out the recipient(s).  It is also possible to create multiple account debits by supplying an array of debit objects 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitRequestWrapper"></param>
        /// <returns>Task of ApiResponse (DebitListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DebitListResponse>> PostAccountsDebitsAsyncWithHttpInfo (DebitRequestWrapper debitRequestWrapper);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountDebitsApi : IAccountDebitsApi
    {
        private TransferZero.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDebitsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountDebitsApi(String basePath)
        {
            this.Configuration = new TransferZero.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TransferZero.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDebitsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AccountDebitsApi()
        {
            this.Configuration = TransferZero.Sdk.Client.Configuration.Default;

            ExceptionFactory = TransferZero.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDebitsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountDebitsApi(TransferZero.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TransferZero.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TransferZero.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TransferZero.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TransferZero.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Fetching an account debit Returns a single account debit by the account debit ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountDebitID">ID of the account debit to get.  Example: &#x60;/v1/accounts/debits/9170c890-1a45-46bd-9b79-3deeb8b4ff3d&#x60;</param>
        /// <returns>DebitResponse</returns>
        public DebitResponse GetAccountsDebit (Guid? accountDebitID)
        {
             ApiResponse<DebitResponse> localVarResponse = GetAccountsDebitWithHttpInfo(accountDebitID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetching an account debit Returns a single account debit by the account debit ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountDebitID">ID of the account debit to get.  Example: &#x60;/v1/accounts/debits/9170c890-1a45-46bd-9b79-3deeb8b4ff3d&#x60;</param>
        /// <returns>ApiResponse of DebitResponse</returns>
        public ApiResponse< DebitResponse > GetAccountsDebitWithHttpInfo (Guid? accountDebitID)
        {
            // verify the required parameter 'accountDebitID' is set
            if (accountDebitID == null)
                throw new ApiException(400, "Missing required parameter 'accountDebitID' when calling AccountDebitsApi->GetAccountsDebit");

            var localVarPath = "/accounts/debits/{Account Debit ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountDebitID != null) localVarPathParams.Add("Account Debit ID", this.Configuration.ApiClient.ParameterToString(accountDebitID)); // path parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountsDebit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DebitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DebitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DebitResponse)));
        }

        /// <summary>
        /// Fetching an account debit Returns a single account debit by the account debit ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountDebitID">ID of the account debit to get.  Example: &#x60;/v1/accounts/debits/9170c890-1a45-46bd-9b79-3deeb8b4ff3d&#x60;</param>
        /// <returns>Task of DebitResponse</returns>
        public async System.Threading.Tasks.Task<DebitResponse> GetAccountsDebitAsync (Guid? accountDebitID)
        {
             ApiResponse<DebitResponse> localVarResponse = await GetAccountsDebitAsyncWithHttpInfo(accountDebitID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetching an account debit Returns a single account debit by the account debit ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountDebitID">ID of the account debit to get.  Example: &#x60;/v1/accounts/debits/9170c890-1a45-46bd-9b79-3deeb8b4ff3d&#x60;</param>
        /// <returns>Task of ApiResponse (DebitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DebitResponse>> GetAccountsDebitAsyncWithHttpInfo (Guid? accountDebitID)
        {
            // verify the required parameter 'accountDebitID' is set
            if (accountDebitID == null)
                throw new ApiException(400, "Missing required parameter 'accountDebitID' when calling AccountDebitsApi->GetAccountsDebit");

            var localVarPath = "/accounts/debits/{Account Debit ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountDebitID != null) localVarPathParams.Add("Account Debit ID", this.Configuration.ApiClient.ParameterToString(accountDebitID)); // path parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountsDebit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DebitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DebitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DebitResponse)));
        }

        /// <summary>
        /// Listing Accounts debits Get a list of accounts debits
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>DebitListResponse</returns>
        public DebitListResponse GetAccountsDebits (int? page = null, int? per = null)
        {
             ApiResponse<DebitListResponse> localVarResponse = GetAccountsDebitsWithHttpInfo(page, per);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Listing Accounts debits Get a list of accounts debits
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>ApiResponse of DebitListResponse</returns>
        public ApiResponse< DebitListResponse > GetAccountsDebitsWithHttpInfo (int? page = null, int? per = null)
        {

            var localVarPath = "/accounts/debits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (per != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per", per)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountsDebits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DebitListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DebitListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DebitListResponse)));
        }

        /// <summary>
        /// Listing Accounts debits Get a list of accounts debits
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>Task of DebitListResponse</returns>
        public async System.Threading.Tasks.Task<DebitListResponse> GetAccountsDebitsAsync (int? page = null, int? per = null)
        {
             ApiResponse<DebitListResponse> localVarResponse = await GetAccountsDebitsAsyncWithHttpInfo(page, per);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Listing Accounts debits Get a list of accounts debits
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <returns>Task of ApiResponse (DebitListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DebitListResponse>> GetAccountsDebitsAsyncWithHttpInfo (int? page = null, int? per = null)
        {

            var localVarPath = "/accounts/debits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (per != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per", per)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountsDebits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DebitListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DebitListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DebitListResponse)));
        }

        /// <summary>
        /// Creating an account debit Creates a new account debit finding transaction through the internal balance  To successfully fund a transaction - - The currency needs to be the same as the input_currency on the transaction - The amount has to be the same as the input_amount on the transaction - The to_id is the id of the transaction - You need to have enough balance of the appropriate currency inside your wallet  Once the transaction is funded, we will immediately start trying to pay out the recipient(s).  It is also possible to create multiple account debits by supplying an array of debit objects 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitRequestWrapper"></param>
        /// <returns>DebitListResponse</returns>
        public DebitListResponse PostAccountsDebits (DebitRequestWrapper debitRequestWrapper)
        {
             ApiResponse<DebitListResponse> localVarResponse = PostAccountsDebitsWithHttpInfo(debitRequestWrapper);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating an account debit Creates a new account debit finding transaction through the internal balance  To successfully fund a transaction - - The currency needs to be the same as the input_currency on the transaction - The amount has to be the same as the input_amount on the transaction - The to_id is the id of the transaction - You need to have enough balance of the appropriate currency inside your wallet  Once the transaction is funded, we will immediately start trying to pay out the recipient(s).  It is also possible to create multiple account debits by supplying an array of debit objects 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitRequestWrapper"></param>
        /// <returns>ApiResponse of DebitListResponse</returns>
        public ApiResponse< DebitListResponse > PostAccountsDebitsWithHttpInfo (DebitRequestWrapper debitRequestWrapper)
        {
            // verify the required parameter 'debitRequestWrapper' is set
            if (debitRequestWrapper == null)
                throw new ApiException(400, "Missing required parameter 'debitRequestWrapper' when calling AccountDebitsApi->PostAccountsDebits");

            var localVarPath = "/accounts/debits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (debitRequestWrapper != null && debitRequestWrapper.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(debitRequestWrapper); // http body (model) parameter
            }
            else
            {
                localVarPostBody = debitRequestWrapper; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAccountsDebits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DebitListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DebitListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DebitListResponse)));
        }

        /// <summary>
        /// Creating an account debit Creates a new account debit finding transaction through the internal balance  To successfully fund a transaction - - The currency needs to be the same as the input_currency on the transaction - The amount has to be the same as the input_amount on the transaction - The to_id is the id of the transaction - You need to have enough balance of the appropriate currency inside your wallet  Once the transaction is funded, we will immediately start trying to pay out the recipient(s).  It is also possible to create multiple account debits by supplying an array of debit objects 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitRequestWrapper"></param>
        /// <returns>Task of DebitListResponse</returns>
        public async System.Threading.Tasks.Task<DebitListResponse> PostAccountsDebitsAsync (DebitRequestWrapper debitRequestWrapper)
        {
             ApiResponse<DebitListResponse> localVarResponse = await PostAccountsDebitsAsyncWithHttpInfo(debitRequestWrapper);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating an account debit Creates a new account debit finding transaction through the internal balance  To successfully fund a transaction - - The currency needs to be the same as the input_currency on the transaction - The amount has to be the same as the input_amount on the transaction - The to_id is the id of the transaction - You need to have enough balance of the appropriate currency inside your wallet  Once the transaction is funded, we will immediately start trying to pay out the recipient(s).  It is also possible to create multiple account debits by supplying an array of debit objects 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitRequestWrapper"></param>
        /// <returns>Task of ApiResponse (DebitListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DebitListResponse>> PostAccountsDebitsAsyncWithHttpInfo (DebitRequestWrapper debitRequestWrapper)
        {
            // verify the required parameter 'debitRequestWrapper' is set
            if (debitRequestWrapper == null)
                throw new ApiException(400, "Missing required parameter 'debitRequestWrapper' when calling AccountDebitsApi->PostAccountsDebits");

            var localVarPath = "/accounts/debits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (debitRequestWrapper != null && debitRequestWrapper.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(debitRequestWrapper); // http body (model) parameter
            }
            else
            {
                localVarPostBody = debitRequestWrapper; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAccountsDebits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DebitListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DebitListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DebitListResponse)));
        }

    }
}
