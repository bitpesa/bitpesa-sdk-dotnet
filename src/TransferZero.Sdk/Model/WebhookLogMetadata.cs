/* 
 * TransferZero API
 *
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TransferZero.Sdk.Client.OpenAPIDateConverter;

namespace TransferZero.Sdk.Model
{
    /// <summary>
    /// WebhookLogMetadata
    /// </summary>
    [DataContract]
    public partial class WebhookLogMetadata :  IEquatable<WebhookLogMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookLogMetadata" /> class.
        /// </summary>
        /// <param name="_params">_params.</param>
        /// <param name="request">request.</param>
        /// <param name="response">response.</param>
        public WebhookLogMetadata(WebhookDefinition _params = default(WebhookDefinition), WebhookLogMetadataRequest request = default(WebhookLogMetadataRequest), WebhookLogMetadataResponse response = default(WebhookLogMetadataResponse))
        {
            this.Params = _params;
            this.Request = request;
            this.Response = response;
        }
        
        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [DataMember(Name="params", EmitDefaultValue=false)]
        public WebhookDefinition Params { get; set; }

        /// <summary>
        /// Specific event that triggered the webhook
        /// </summary>
        /// <value>Specific event that triggered the webhook</value>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public string Event { get; private set; }

        /// <summary>
        /// Instance ID of the webhook event
        /// </summary>
        /// <value>Instance ID of the webhook event</value>
        [DataMember(Name="instance_id", EmitDefaultValue=false)]
        public string InstanceId { get; private set; }

        /// <summary>
        /// Type of instance event
        /// </summary>
        /// <value>Type of instance event</value>
        [DataMember(Name="instance_type", EmitDefaultValue=false)]
        public string InstanceType { get; private set; }

        /// <summary>
        /// Attempt ID
        /// </summary>
        /// <value>Attempt ID</value>
        [DataMember(Name="attempt_id", EmitDefaultValue=false)]
        public string AttemptId { get; private set; }

        /// <summary>
        /// Number of tries at the point webhook was triggered
        /// </summary>
        /// <value>Number of tries at the point webhook was triggered</value>
        [DataMember(Name="tries", EmitDefaultValue=false)]
        public int? Tries { get; private set; }

        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [DataMember(Name="request", EmitDefaultValue=false)]
        public WebhookLogMetadataRequest Request { get; set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [DataMember(Name="response", EmitDefaultValue=false)]
        public WebhookLogMetadataResponse Response { get; set; }

        /// <summary>
        /// ID of app on which webhook event was triggered
        /// </summary>
        /// <value>ID of app on which webhook event was triggered</value>
        [DataMember(Name="app_id", EmitDefaultValue=false)]
        public string AppId { get; private set; }

        /// <summary>
        /// ID of API key in use at point of webhook event
        /// </summary>
        /// <value>ID of API key in use at point of webhook event</value>
        [DataMember(Name="api_key_id", EmitDefaultValue=false)]
        public string ApiKeyId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookLogMetadata {\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  InstanceType: ").Append(InstanceType).Append("\n");
            sb.Append("  AttemptId: ").Append(AttemptId).Append("\n");
            sb.Append("  Tries: ").Append(Tries).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  ApiKeyId: ").Append(ApiKeyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookLogMetadata);
        }

        /// <summary>
        /// Returns true if WebhookLogMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookLogMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookLogMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Params == input.Params ||
                    (this.Params != null &&
                    this.Params.Equals(input.Params))
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.InstanceType == input.InstanceType ||
                    (this.InstanceType != null &&
                    this.InstanceType.Equals(input.InstanceType))
                ) && 
                (
                    this.AttemptId == input.AttemptId ||
                    (this.AttemptId != null &&
                    this.AttemptId.Equals(input.AttemptId))
                ) && 
                (
                    this.Tries == input.Tries ||
                    (this.Tries != null &&
                    this.Tries.Equals(input.Tries))
                ) && 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                ) && 
                (
                    this.Response == input.Response ||
                    (this.Response != null &&
                    this.Response.Equals(input.Response))
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.ApiKeyId == input.ApiKeyId ||
                    (this.ApiKeyId != null &&
                    this.ApiKeyId.Equals(input.ApiKeyId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Params != null)
                    hashCode = hashCode * 59 + this.Params.GetHashCode();
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                if (this.InstanceId != null)
                    hashCode = hashCode * 59 + this.InstanceId.GetHashCode();
                if (this.InstanceType != null)
                    hashCode = hashCode * 59 + this.InstanceType.GetHashCode();
                if (this.AttemptId != null)
                    hashCode = hashCode * 59 + this.AttemptId.GetHashCode();
                if (this.Tries != null)
                    hashCode = hashCode * 59 + this.Tries.GetHashCode();
                if (this.Request != null)
                    hashCode = hashCode * 59 + this.Request.GetHashCode();
                if (this.Response != null)
                    hashCode = hashCode * 59 + this.Response.GetHashCode();
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.ApiKeyId != null)
                    hashCode = hashCode * 59 + this.ApiKeyId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
