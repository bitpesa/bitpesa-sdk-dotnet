/* 
 * TransferZero API
 *
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TransferZero.Sdk.Client.OpenAPIDateConverter;

namespace TransferZero.Sdk.Model
{
    /// <summary>
    /// Debits are used to fund transactions from your internal TransferZero balance.
    /// </summary>
    [DataContract]
    public partial class Debit :  IEquatable<Debit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Debit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Debit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Debit" /> class.
        /// </summary>
        /// <param name="amount">The amount to be debited from your account.  The “amount” parameter is optional - - if included, it must equal the amount required to fund the transaction. - if omitted, it will default to the amount required to fund the transaction. .</param>
        /// <param name="currency">The currency of the amount in 3-character alpha ISO 4217 currency format (required).</param>
        /// <param name="toType">Describes what the debit is funding (required).</param>
        /// <param name="toId">The ID of the resource the debit is funding (required).</param>
        /// <param name="metadata">Metadata of account debit.</param>
        public Debit(double? amount = default(double?), string currency = default(string), string toType = default(string), Guid? toId = default(Guid?), Object metadata = default(Object))
        {
            this.Currency = currency;
            this.ToType = toType;
            this.ToId = toId;
            this.Amount = amount;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// The amount to be debited from your account.  The “amount” parameter is optional - - if included, it must equal the amount required to fund the transaction. - if omitted, it will default to the amount required to fund the transaction. 
        /// </summary>
        /// <value>The amount to be debited from your account.  The “amount” parameter is optional - - if included, it must equal the amount required to fund the transaction. - if omitted, it will default to the amount required to fund the transaction. </value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// The currency of the amount in 3-character alpha ISO 4217 currency format
        /// </summary>
        /// <value>The currency of the amount in 3-character alpha ISO 4217 currency format</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Describes what the debit is funding
        /// </summary>
        /// <value>Describes what the debit is funding</value>
        [DataMember(Name="to_type", EmitDefaultValue=false)]
        public string ToType { get; set; }

        /// <summary>
        /// The ID of the resource the debit is funding
        /// </summary>
        /// <value>The ID of the resource the debit is funding</value>
        [DataMember(Name="to_id", EmitDefaultValue=false)]
        public Guid? ToId { get; set; }

        /// <summary>
        /// Metadata of account debit
        /// </summary>
        /// <value>Metadata of account debit</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; private set; }

        /// <summary>
        /// Date and time that the debit was created
        /// </summary>
        /// <value>Date and time that the debit was created</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// The amount to be debited from your account converted to USD 
        /// </summary>
        /// <value>The amount to be debited from your account converted to USD </value>
        [DataMember(Name="usd_amount", EmitDefaultValue=false)]
        public double? UsdAmount { get; private set; }

        /// <summary>
        /// The total amount remaining in your account after the debit call 
        /// </summary>
        /// <value>The total amount remaining in your account after the debit call </value>
        [DataMember(Name="running_balance", EmitDefaultValue=false)]
        public double? RunningBalance { get; private set; }

        /// <summary>
        /// The fields that have some problems and don&#39;t pass validation
        /// </summary>
        /// <value>The fields that have some problems and don&#39;t pass validation</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public Dictionary<string, List<ValidationErrorDescription>> Errors { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Debit {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ToType: ").Append(ToType).Append("\n");
            sb.Append("  ToId: ").Append(ToId).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UsdAmount: ").Append(UsdAmount).Append("\n");
            sb.Append("  RunningBalance: ").Append(RunningBalance).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Debit);
        }

        /// <summary>
        /// Returns true if Debit instances are equal
        /// </summary>
        /// <param name="input">Instance of Debit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Debit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.ToType == input.ToType ||
                    (this.ToType != null &&
                    this.ToType.Equals(input.ToType))
                ) && 
                (
                    this.ToId == input.ToId ||
                    (this.ToId != null &&
                    this.ToId.Equals(input.ToId))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UsdAmount == input.UsdAmount ||
                    (this.UsdAmount != null &&
                    this.UsdAmount.Equals(input.UsdAmount))
                ) && 
                (
                    this.RunningBalance == input.RunningBalance ||
                    (this.RunningBalance != null &&
                    this.RunningBalance.Equals(input.RunningBalance))
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.ToType != null)
                    hashCode = hashCode * 59 + this.ToType.GetHashCode();
                if (this.ToId != null)
                    hashCode = hashCode * 59 + this.ToId.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UsdAmount != null)
                    hashCode = hashCode * 59 + this.UsdAmount.GetHashCode();
                if (this.RunningBalance != null)
                    hashCode = hashCode * 59 + this.RunningBalance.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
